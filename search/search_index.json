{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"build/aliases/","text":"Adding aliases \u00b6 Add the definitionIDs used by your application to the aliases object in your JavaScript file. This will allow you to read records and write records using human-readable aliases . Default aliases \u00b6 IDX comes prepackaged with a set of default definitions and corresponding aliases that you can use within your project to write or read records without any additional configuration or set up. These do not need to be added to your alias object and their aliases can be used automatically. To understand what's included, view default definitions . Use case: Read or write to a universal user profile IDX includes a basicProfile alias that allows you to read or write to a basic user profile without needing to worry about definitions or aliases. Custom aliases \u00b6 If you want to do more with IDX than what's inclued in default definitions, you will need to gather existing definitions or create new definitions and then add them to your aliases object. const aliases = { alias1 : 'definitionID 1' , alias2 : 'definitionID 2' , } Using existing definitions \u00b6 If you want to write or read records that already exist and have been created by third-party applications, then you will need to reuse existing definitions and add them to your aliases object. Reusing definitions encourages cross-platform data interoperability by converging on definitions and schema standards specific to certain use cases. After discovering these definitions, you will need to add them to your aliases object. There are various ways to discover existing definitions, see existing definitions . Use case: Display blog posts created in another application For a simple demonstration, let's consider a use case where two different applications want to display the blog posts created by a user. Both applications would need to read the same record that contains the list of the user's blog posts. To do this they would need to use the same definition. Using new definitions \u00b6 If you are not able to use default or existing definitions in your project, then you will need to create new definitions. Creating new definitions allows you to create and interact with records specifically suited to the needs of your application. After creating definitions, you will need to add them to your aliases object. For a step by step guide, see creating definitions .","title":"Adding aliases"},{"location":"build/aliases/#adding-aliases","text":"Add the definitionIDs used by your application to the aliases object in your JavaScript file. This will allow you to read records and write records using human-readable aliases .","title":"Adding aliases"},{"location":"build/aliases/#default-aliases","text":"IDX comes prepackaged with a set of default definitions and corresponding aliases that you can use within your project to write or read records without any additional configuration or set up. These do not need to be added to your alias object and their aliases can be used automatically. To understand what's included, view default definitions . Use case: Read or write to a universal user profile IDX includes a basicProfile alias that allows you to read or write to a basic user profile without needing to worry about definitions or aliases.","title":"Default aliases"},{"location":"build/aliases/#custom-aliases","text":"If you want to do more with IDX than what's inclued in default definitions, you will need to gather existing definitions or create new definitions and then add them to your aliases object. const aliases = { alias1 : 'definitionID 1' , alias2 : 'definitionID 2' , }","title":"Custom aliases"},{"location":"build/aliases/#using-existing-definitions","text":"If you want to write or read records that already exist and have been created by third-party applications, then you will need to reuse existing definitions and add them to your aliases object. Reusing definitions encourages cross-platform data interoperability by converging on definitions and schema standards specific to certain use cases. After discovering these definitions, you will need to add them to your aliases object. There are various ways to discover existing definitions, see existing definitions . Use case: Display blog posts created in another application For a simple demonstration, let's consider a use case where two different applications want to display the blog posts created by a user. Both applications would need to read the same record that contains the list of the user's blog posts. To do this they would need to use the same definition.","title":"Using existing definitions"},{"location":"build/aliases/#using-new-definitions","text":"If you are not able to use default or existing definitions in your project, then you will need to create new definitions. Creating new definitions allows you to create and interact with records specifically suited to the needs of your application. After creating definitions, you will need to add them to your aliases object. For a step by step guide, see creating definitions .","title":"Using new definitions"},{"location":"build/authentication/","text":"Authentication \u00b6 Authentication allows you to write records or read encrypted records . If you only need to read plaintext records, then you do not need authentication. How it works \u00b6 IDX uses DIDs for identifiers and authentication. Once a DID is authenticated using a DID provider , the authenticated DID provider needs to be set to the Ceramic instance used by your project. This will allow the user to perform authenticated transactions on IDX using their DID such as writing records and reading encrypted records . Prerequisites \u00b6 In order to add authentication, you must have installed the IDX SDK . Installation \u00b6 Jump over to the Ceramic documentation to learn how to add authentication to your project. Example \u00b6 After you have set the authenticated DID provider on the ceramic instance you can interact with your idx instance in an authenticated way. If configured correctly, it will look something like this: ceramic . did = did await idx . get ( 'anAlias' ) // uses authenticated DID","title":"Authentication"},{"location":"build/authentication/#authentication","text":"Authentication allows you to write records or read encrypted records . If you only need to read plaintext records, then you do not need authentication.","title":"Authentication"},{"location":"build/authentication/#how-it-works","text":"IDX uses DIDs for identifiers and authentication. Once a DID is authenticated using a DID provider , the authenticated DID provider needs to be set to the Ceramic instance used by your project. This will allow the user to perform authenticated transactions on IDX using their DID such as writing records and reading encrypted records .","title":"How it works"},{"location":"build/authentication/#prerequisites","text":"In order to add authentication, you must have installed the IDX SDK .","title":"Prerequisites"},{"location":"build/authentication/#installation","text":"Jump over to the Ceramic documentation to learn how to add authentication to your project.","title":"Installation"},{"location":"build/authentication/#example","text":"After you have set the authenticated DID provider on the ceramic instance you can interact with your idx instance in an authenticated way. If configured correctly, it will look something like this: ceramic . did = did await idx . get ( 'anAlias' ) // uses authenticated DID","title":"Example"},{"location":"build/installation/","text":"Installation \u00b6 Install the IDX SDK and set up your project. IDX is in alpha. Libraries may be unstable and APIs are subject to change. Data created on IDX during alpha will not be portable to production. Please share what you're working on and report any issues in the IDX Discord . Installation \u00b6 Install the IDX SDK and the Ceramic HTTP client using npm. npm install @ceramicnetwork/http-client @ceramicstudio/idx Setup \u00b6 Import dependencies \u00b6 Import Ceramic and IDX by adding these lines to a JavaScript file in your project. import Ceramic from '@ceramicnetwork/http-client' import { IDX } from '@ceramicstudio/idx' Set up aliases \u00b6 Add an aliases object to your JavaScript file. This object stores mappings from human-readable aliases to definitionIDs , making it easier to reference definitions throughout your project. const aliases = { alias1 : 'definitionID 1' , alias2 : 'definitionID 2' , } Visit adding aliases to learn how to add definitions to this list. Create instances \u00b6 Create instances of ceramic and idx by adding these lines to your JavaScript file. These instances will be used when interacting with the Ceramic and IDX APIs. const ceramic = new Ceramic ( 'https://yourceramicnode.com' ) const idx = new IDX ({ ceramic , aliases }) Set your Ceramic node \u00b6 Set the HTTP URL of the Ceramic node you are using in your project to your ceramic instance above. Ceramic node options: Community gateway https://gateway-clay.ceramic.network : Provides read-only access to the Ceramic Clay testnet. (recommended) Community dev node https://ceramic-clay.3boxlabs.com : Provides write and read access to the Ceramic Clay testnet. This node is periodically wiped and does not guarantee document persistence. (recommended) Run your own node https://yourEndpoint.com : Provides write and read access to the Ceramic Clay testnet. Running your own node allows you to persist data and have full control, however this is process is not yet well documented. If you choose to run your own node, be sure to add your node to the Ceramic peerlist by submitting a pull request. This allows other nodes to discover your node. LocalHost https://localhost:7007 : Provides read access to the Clay testnet. Writes made to this local node will only be available to nodes in the peerlist , but will not be available to other nodes on the network. Users need to first have a Ceramic daemon running locally using the CLI. Example \u00b6 Your code should look like this: import Ceramic from '@ceramicnetwork/http-client' import { IDX } from '@ceramicstudio/idx' const aliases = { alias1 : 'definitionID 1' , alias2 : 'definitionID 2' , } const ceramic = new Ceramic ( 'https://yourceramicnode.com' ) const idx = new IDX ({ ceramic , aliases })","title":"Installation"},{"location":"build/installation/#installation","text":"Install the IDX SDK and set up your project. IDX is in alpha. Libraries may be unstable and APIs are subject to change. Data created on IDX during alpha will not be portable to production. Please share what you're working on and report any issues in the IDX Discord .","title":"Installation"},{"location":"build/installation/#installation_1","text":"Install the IDX SDK and the Ceramic HTTP client using npm. npm install @ceramicnetwork/http-client @ceramicstudio/idx","title":"Installation"},{"location":"build/installation/#setup","text":"","title":"Setup"},{"location":"build/installation/#import-dependencies","text":"Import Ceramic and IDX by adding these lines to a JavaScript file in your project. import Ceramic from '@ceramicnetwork/http-client' import { IDX } from '@ceramicstudio/idx'","title":"Import dependencies"},{"location":"build/installation/#set-up-aliases","text":"Add an aliases object to your JavaScript file. This object stores mappings from human-readable aliases to definitionIDs , making it easier to reference definitions throughout your project. const aliases = { alias1 : 'definitionID 1' , alias2 : 'definitionID 2' , } Visit adding aliases to learn how to add definitions to this list.","title":"Set up aliases"},{"location":"build/installation/#create-instances","text":"Create instances of ceramic and idx by adding these lines to your JavaScript file. These instances will be used when interacting with the Ceramic and IDX APIs. const ceramic = new Ceramic ( 'https://yourceramicnode.com' ) const idx = new IDX ({ ceramic , aliases })","title":"Create instances"},{"location":"build/installation/#set-your-ceramic-node","text":"Set the HTTP URL of the Ceramic node you are using in your project to your ceramic instance above. Ceramic node options: Community gateway https://gateway-clay.ceramic.network : Provides read-only access to the Ceramic Clay testnet. (recommended) Community dev node https://ceramic-clay.3boxlabs.com : Provides write and read access to the Ceramic Clay testnet. This node is periodically wiped and does not guarantee document persistence. (recommended) Run your own node https://yourEndpoint.com : Provides write and read access to the Ceramic Clay testnet. Running your own node allows you to persist data and have full control, however this is process is not yet well documented. If you choose to run your own node, be sure to add your node to the Ceramic peerlist by submitting a pull request. This allows other nodes to discover your node. LocalHost https://localhost:7007 : Provides read access to the Clay testnet. Writes made to this local node will only be available to nodes in the peerlist , but will not be available to other nodes on the network. Users need to first have a Ceramic daemon running locally using the CLI.","title":"Set your Ceramic node"},{"location":"build/installation/#example","text":"Your code should look like this: import Ceramic from '@ceramicnetwork/http-client' import { IDX } from '@ceramicstudio/idx' const aliases = { alias1 : 'definitionID 1' , alias2 : 'definitionID 2' , } const ceramic = new Ceramic ( 'https://yourceramicnode.com' ) const idx = new IDX ({ ceramic , aliases })","title":"Example"},{"location":"build/quick-start/","text":"Quick start \u00b6 Get started exploring what's possible with IDX using the IDX CLI . For runtime usage in your project, you will need to install the IDX SDK . IDX is in alpha. Libraries may be unstable and APIs are subject to change. Data created on IDX during alpha will not be portable to production. Please share what you're working on and report any issues in the IDX Discord . Prerequisites \u00b6 The IDX CLI requires Node.js v14+ and npm v6+ (usually installed with Node.js). Make sure to have both installed. On Linux you will also need the libsecret library to be installed, as instructed here . Step 1: Install IDX CLI \u00b6 Open your terminal and install the IDX CLI and Ceramic CLI . npm install -g @ceramicnetwork/cli @ceramicstudio/idx-cli Start the Ceramic daemon. This will start a Ceramic node on your local machine and connect to it on http://localhost:7007 . ceramic daemon Bootstrap IDX on your Ceramic node. This will install certain requirements needed for IDX to properly function. idx bootstrap Step 2: Query a record \u00b6 Let's query a record that stores a basic profile . Use the idx index:get command and the basicProfile alias . As you can see below, we are looking up the profile of user did:key:z6Mkw1Mpfejq2R76AsQo2qJoAVaF6HH5nLDoHrKrsW5Wdnei . Command idx index:get did:key:z6Mkw1Mpfejq2R76AsQo2qJoAVaF6HH5nLDoHrKrsW5Wdnei basicProfile Output \u2714 Contents successfully loaded { name: 'Alan Turing' } Since basic profiles are a commonly used definition on IDX, we have assigned it the default basicProfile alias for simplicity. Default definitions were installed when you ran the idx bootstrap command earlier. However, you could run the same index:get command using the raw StreamID of the basic profile definition instead of its alias and get the same data back. idx index:get did:key:z6Mkw1Mpfejq2R76AsQo2qJoAVaF6HH5nLDoHrKrsW5Wdnei kjzl6cwe1jw14bdsytwychcd91fcc7xibfj8bc0r2h3w5wm8t6rt4dtlrotl1ou Step 3: Create a DID \u00b6 Use the idx did:create command to create a new DID enabled with IDX. Command idx did:create Output \u2714 Created DID: did:key:z6MkuEd4fm7qNq8hkmWFM1NLVBAXa4t2GcNDdmVzBrRm2DNm Use the idx did:list command to get your DID from the node. Command idx did:list Output \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 DID \u2502 Label \u2502 Created \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 did:key:z6MkuEd4fm7qNq8hkmWFM1NLVBAXa4t2GcNDdmVzBrRm2DNm \u2502 ( no label ) \u2502 Thu Jan 14 2021 11 :51:07 GMT+0000 ( Greenwich Mean Time ) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Step 4: Create a record \u00b6 Use the idx index:set command to set data to a record for the currently authenticated DID. In this example we're passing the same basicProfile alias as above to specify that we want to save data to record corresponding to the default basic profile definition. The final part of this command is the actual contents we want to set to the record. These contents must conform to the schema specified in the definition. If not, the command will fail. idx index:set <did:key:myDID> basicProfile '{\"name\":\"YourName\"}' Step 5: Query your record \u00b6 Use the idx index:get command to query your newly created basic profile record. Command idx index:get <did:key:myDID> basicProfile Output The profile that you created in the previoius step Doing more \u00b6 Run the --h command to list all commands available in the IDX CLI. All the commands provided by the IDX CLI can also be found in the CLI documentation . idx --help That's it! \u00b6 Congratulations on completing this introductory tutorial. You're well on your way to becoming an IDX developer.","title":"Quick Start"},{"location":"build/quick-start/#quick-start","text":"Get started exploring what's possible with IDX using the IDX CLI . For runtime usage in your project, you will need to install the IDX SDK . IDX is in alpha. Libraries may be unstable and APIs are subject to change. Data created on IDX during alpha will not be portable to production. Please share what you're working on and report any issues in the IDX Discord .","title":"Quick start"},{"location":"build/quick-start/#prerequisites","text":"The IDX CLI requires Node.js v14+ and npm v6+ (usually installed with Node.js). Make sure to have both installed. On Linux you will also need the libsecret library to be installed, as instructed here .","title":"Prerequisites"},{"location":"build/quick-start/#step-1-install-idx-cli","text":"Open your terminal and install the IDX CLI and Ceramic CLI . npm install -g @ceramicnetwork/cli @ceramicstudio/idx-cli Start the Ceramic daemon. This will start a Ceramic node on your local machine and connect to it on http://localhost:7007 . ceramic daemon Bootstrap IDX on your Ceramic node. This will install certain requirements needed for IDX to properly function. idx bootstrap","title":"Step 1: Install IDX CLI"},{"location":"build/quick-start/#step-2-query-a-record","text":"Let's query a record that stores a basic profile . Use the idx index:get command and the basicProfile alias . As you can see below, we are looking up the profile of user did:key:z6Mkw1Mpfejq2R76AsQo2qJoAVaF6HH5nLDoHrKrsW5Wdnei . Command idx index:get did:key:z6Mkw1Mpfejq2R76AsQo2qJoAVaF6HH5nLDoHrKrsW5Wdnei basicProfile Output \u2714 Contents successfully loaded { name: 'Alan Turing' } Since basic profiles are a commonly used definition on IDX, we have assigned it the default basicProfile alias for simplicity. Default definitions were installed when you ran the idx bootstrap command earlier. However, you could run the same index:get command using the raw StreamID of the basic profile definition instead of its alias and get the same data back. idx index:get did:key:z6Mkw1Mpfejq2R76AsQo2qJoAVaF6HH5nLDoHrKrsW5Wdnei kjzl6cwe1jw14bdsytwychcd91fcc7xibfj8bc0r2h3w5wm8t6rt4dtlrotl1ou","title":"Step 2: Query a record"},{"location":"build/quick-start/#step-3-create-a-did","text":"Use the idx did:create command to create a new DID enabled with IDX. Command idx did:create Output \u2714 Created DID: did:key:z6MkuEd4fm7qNq8hkmWFM1NLVBAXa4t2GcNDdmVzBrRm2DNm Use the idx did:list command to get your DID from the node. Command idx did:list Output \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 DID \u2502 Label \u2502 Created \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 did:key:z6MkuEd4fm7qNq8hkmWFM1NLVBAXa4t2GcNDdmVzBrRm2DNm \u2502 ( no label ) \u2502 Thu Jan 14 2021 11 :51:07 GMT+0000 ( Greenwich Mean Time ) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Step 3: Create a DID"},{"location":"build/quick-start/#step-4-create-a-record","text":"Use the idx index:set command to set data to a record for the currently authenticated DID. In this example we're passing the same basicProfile alias as above to specify that we want to save data to record corresponding to the default basic profile definition. The final part of this command is the actual contents we want to set to the record. These contents must conform to the schema specified in the definition. If not, the command will fail. idx index:set <did:key:myDID> basicProfile '{\"name\":\"YourName\"}'","title":"Step 4: Create a record"},{"location":"build/quick-start/#step-5-query-your-record","text":"Use the idx index:get command to query your newly created basic profile record. Command idx index:get <did:key:myDID> basicProfile Output The profile that you created in the previoius step","title":"Step 5: Query your record"},{"location":"build/quick-start/#doing-more","text":"Run the --h command to list all commands available in the IDX CLI. All the commands provided by the IDX CLI can also be found in the CLI documentation . idx --help","title":"Doing more"},{"location":"build/quick-start/#thats-it","text":"Congratulations on completing this introductory tutorial. You're well on your way to becoming an IDX developer.","title":"That's it!"},{"location":"build/reading/","text":"Reading records \u00b6 Use the idx.get() method to query a record at runtime. Using default aliases \u00b6 Pass an alias from default definitions , and the DID or Blockchain Account ID that you wish to query. For example if you want to query IDX data from the ethereum account 0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb on mainnet you can simply use the string 0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb@eip155:1 . await idx . get ( 'basicProfile' , '<DID-or-caip10-id>' ) API reference Using your aliases \u00b6 Pass as alias from your aliases object, and the DID or Blockchain Account ID that you wish to query. await idx . get ( 'myAlias' , '<DID-or-caip10-id>' ) API reference Authenticated users \u00b6 If a user is currently authenticated to your application, you only need to pass an alias. When no DID is provided, IDX will default to the DID of the currently authenticated user. await idx . get ( 'myAlias' ) API reference Example \u00b6 Method call await idx . get ( 'basicProfile' ) Returned value { name : 'Alan Turing' , description : 'I make computers beep good.' , image : '' , emoji : '\ud83d\udcbb' }","title":"Reading records"},{"location":"build/reading/#reading-records","text":"Use the idx.get() method to query a record at runtime.","title":"Reading records"},{"location":"build/reading/#using-default-aliases","text":"Pass an alias from default definitions , and the DID or Blockchain Account ID that you wish to query. For example if you want to query IDX data from the ethereum account 0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb on mainnet you can simply use the string 0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb@eip155:1 . await idx . get ( 'basicProfile' , '<DID-or-caip10-id>' ) API reference","title":"Using default aliases"},{"location":"build/reading/#using-your-aliases","text":"Pass as alias from your aliases object, and the DID or Blockchain Account ID that you wish to query. await idx . get ( 'myAlias' , '<DID-or-caip10-id>' ) API reference","title":"Using your aliases"},{"location":"build/reading/#authenticated-users","text":"If a user is currently authenticated to your application, you only need to pass an alias. When no DID is provided, IDX will default to the DID of the currently authenticated user. await idx . get ( 'myAlias' ) API reference","title":"Authenticated users"},{"location":"build/reading/#example","text":"Method call await idx . get ( 'basicProfile' ) Returned value { name : 'Alan Turing' , description : 'I make computers beep good.' , image : '' , emoji : '\ud83d\udcbb' }","title":"Example"},{"location":"build/share/","text":"Share your project \u00b6 Congratulations on making it this far! We're excited to see what you've built with IDX. To help the community discover your work and the definitions you're using: Add your project to the ecosystem page Add the idx and identityindex topics to your project on Github","title":"Share your project"},{"location":"build/share/#share-your-project","text":"Congratulations on making it this far! We're excited to see what you've built with IDX. To help the community discover your work and the definitions you're using: Add your project to the ecosystem page Add the idx and identityindex topics to your project on Github","title":"Share your project"},{"location":"build/troubleshooting/","text":"Troubleshooting \u00b6 Developer Chat \u00b6 For developer questions, chat, and support, join us on the IDX Discord . Github Issues \u00b6 For specific bugs, issues, and feature requests, create a Github issue . Before creating a new issue, please search existing issues to ensure your issue has not already been reported. If it has, just add a new comment to that issue explaining that you are encourering the same problem. Twitter \u00b6 For updates and news from the IDX ecosystem, follow IDX on Twitter .","title":"Troubleshooting"},{"location":"build/troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"build/troubleshooting/#developer-chat","text":"For developer questions, chat, and support, join us on the IDX Discord .","title":"Developer Chat"},{"location":"build/troubleshooting/#github-issues","text":"For specific bugs, issues, and feature requests, create a Github issue . Before creating a new issue, please search existing issues to ensure your issue has not already been reported. If it has, just add a new comment to that issue explaining that you are encourering the same problem.","title":"Github Issues"},{"location":"build/troubleshooting/#twitter","text":"For updates and news from the IDX ecosystem, follow IDX on Twitter .","title":"Twitter"},{"location":"build/writing/","text":"Writing records \u00b6 Use the idx.set() method to create or modify a record at runtime. Writing to records requires having an authenticated user . All writes will be performed by that user and applied to their records. If a record is already set, calling idx.set() again will completely replace the existing record content with new content. Alternatively, it is possible to update only a specific portion of an existing record using idx.merge() . Using default aliases \u00b6 Pass an alias from default aliases and the data that you wish to write to the record. await idx . set ( 'basicProfile' , content ) API reference Using your aliases \u00b6 Pass an alias from your aliases object and the data that you wish to write to the record. await idx . set ( 'myAlias' , content ) API reference Example \u00b6 Method call await idx . set ( 'basicProfile' , { name : 'Alan Turing' , description : 'I make computers beep good.' , emoji : '\ud83d\udcbb' , }) Returned value recordID of the record Updating records \u00b6 Calling idx.set() on an existing record completely replaces the existing content. If you want to keep the existing content and only change some fields, idx.merge() can be used instead. First set call await idx . set ( 'basicProfile' , { name : 'Alan Turing' }) Second merge call await idx . merge ( 'basicProfile' , { emoji : '\ud83d\udcbb' }) Resulting record { name : 'Alan Turing' , emoji : '\ud83d\udcbb' , } API reference","title":"Writing records"},{"location":"build/writing/#writing-records","text":"Use the idx.set() method to create or modify a record at runtime. Writing to records requires having an authenticated user . All writes will be performed by that user and applied to their records. If a record is already set, calling idx.set() again will completely replace the existing record content with new content. Alternatively, it is possible to update only a specific portion of an existing record using idx.merge() .","title":"Writing records"},{"location":"build/writing/#using-default-aliases","text":"Pass an alias from default aliases and the data that you wish to write to the record. await idx . set ( 'basicProfile' , content ) API reference","title":"Using default aliases"},{"location":"build/writing/#using-your-aliases","text":"Pass an alias from your aliases object and the data that you wish to write to the record. await idx . set ( 'myAlias' , content ) API reference","title":"Using your aliases"},{"location":"build/writing/#example","text":"Method call await idx . set ( 'basicProfile' , { name : 'Alan Turing' , description : 'I make computers beep good.' , emoji : '\ud83d\udcbb' , }) Returned value recordID of the record","title":"Example"},{"location":"build/writing/#updating-records","text":"Calling idx.set() on an existing record completely replaces the existing content. If you want to keep the existing content and only change some fields, idx.merge() can be used instead. First set call await idx . set ( 'basicProfile' , { name : 'Alan Turing' }) Second merge call await idx . merge ( 'basicProfile' , { emoji : '\ud83d\udcbb' }) Resulting record { name : 'Alan Turing' , emoji : '\ud83d\udcbb' , } API reference","title":"Updating records"},{"location":"guides/cli/","text":"Using the IDX CLI \u00b6 Prerequisites \u00b6 The IDX CLI requires Node.js v14 and npm v6 (usually installed with Node.js). Make sure to have both installed. On Linux you will also need the libsecret library to be installed, as instructed here . If you have not installed the Ceramic CLI, it is recommended you use it alongside the IDX CLI, otherwise you will have to use a remote Ceramic server: npm install --global @ceramicnetwork/cli Installation \u00b6 npm install --global @ceramicstudio/idx-cli The CLI should then be accessible as idx . Up and running \u00b6 Most commands of the IDX CLI need to communicate with a Ceramic HTTP server, using one of the following options: Explicit flag \u00b6 By setting the --ceramic flag when running a command, it is possible to specify what Ceramic HTTP URL to use, for example: idx index:inspect <did> --ceramic = https://my-ceramic-server.tld Environment variable \u00b6 If present, the CERAMIC_URL environment variable will be used by the CLI, for example on a UNIX system: CERAMIC_URL = https://my-ceramic-server.tld idx index:inspect <did> CLI configuration \u00b6 Instead of having to explicitely provide a command flag or environment variable, the default Ceramic HTTP URL to connect to can be stored in a configuration used by the CLI, such as: idx config:set ceramic-url https://my-ceramic-server.tld The config:get command can be used to check the URL stored in configuration: idx config:get ceramic-url Local Ceramic daemon (default) \u00b6 If no other method is provided, the CLI will fallback to use the default URL of the Ceramic daemon: http://localhost:7007 . If you see an error when using the IDX CLI stating it can't connect to http://localhost:7007 , it means no other URL has been provided and the Ceramic daemon is not running. To start the Ceramic daemon, having the Ceramic CLI installed as instructed above , simply run the daemon command: ceramic daemon Bootstrap Ceramic for IDX \u00b6 The IDX library relies on some Ceramic streams used as schemas and definitions from the IDX specifications to be accessible on the Ceramic network. When using the main Ceramic network and public testnets it is likely these streams would already be present, but for private test networks and local nodes, you may have to ensure these streams are created before using IDX. In order to bootstrap a Ceramic network with the necessary IDX streams, simply run the bootstrap command: idx bootstrap Create your DID \u00b6 IDX uses Decentralized Identifiers (DID) for authentication and Identity Index streams are therefore controlled by a DID. Before being able to interact with the Identity Index stream, it is necessary to create the DID that will control it. This can easily be done using the IDX CLI: idx did:create --label = me Here we also set the optional label flag as a local identifier for the DID, providing a simpler way to reference it. It is possible to display all the locally created DIDs and their labels by running the did:list command: idx did:list Inspect the IDX index contents \u00b6 By running then index:inspect it is possible to inspect the IDX index contents associated to a DID. Assuming you have created a DID using the step above, you can run the following command: idx index:inspect me Interact with IDX \u00b6 Finally, once all the steps above have been successfully followed, you can start interacting with contents in your Identity Index, for example setting your basic profile using the provided IDX definition: idx index:set me basicProfile '{\"name\":\"Alice\"}' By running the index:get command, you can check the stored record: idx index:get me basicProfile All the commands provided by the IDX CLI can be found in the CLI documentation .","title":"Using the CLI"},{"location":"guides/cli/#using-the-idx-cli","text":"","title":"Using the IDX CLI"},{"location":"guides/cli/#prerequisites","text":"The IDX CLI requires Node.js v14 and npm v6 (usually installed with Node.js). Make sure to have both installed. On Linux you will also need the libsecret library to be installed, as instructed here . If you have not installed the Ceramic CLI, it is recommended you use it alongside the IDX CLI, otherwise you will have to use a remote Ceramic server: npm install --global @ceramicnetwork/cli","title":"Prerequisites"},{"location":"guides/cli/#installation","text":"npm install --global @ceramicstudio/idx-cli The CLI should then be accessible as idx .","title":"Installation"},{"location":"guides/cli/#up-and-running","text":"Most commands of the IDX CLI need to communicate with a Ceramic HTTP server, using one of the following options:","title":"Up and running"},{"location":"guides/cli/#explicit-flag","text":"By setting the --ceramic flag when running a command, it is possible to specify what Ceramic HTTP URL to use, for example: idx index:inspect <did> --ceramic = https://my-ceramic-server.tld","title":"Explicit flag"},{"location":"guides/cli/#environment-variable","text":"If present, the CERAMIC_URL environment variable will be used by the CLI, for example on a UNIX system: CERAMIC_URL = https://my-ceramic-server.tld idx index:inspect <did>","title":"Environment variable"},{"location":"guides/cli/#cli-configuration","text":"Instead of having to explicitely provide a command flag or environment variable, the default Ceramic HTTP URL to connect to can be stored in a configuration used by the CLI, such as: idx config:set ceramic-url https://my-ceramic-server.tld The config:get command can be used to check the URL stored in configuration: idx config:get ceramic-url","title":"CLI configuration"},{"location":"guides/cli/#local-ceramic-daemon-default","text":"If no other method is provided, the CLI will fallback to use the default URL of the Ceramic daemon: http://localhost:7007 . If you see an error when using the IDX CLI stating it can't connect to http://localhost:7007 , it means no other URL has been provided and the Ceramic daemon is not running. To start the Ceramic daemon, having the Ceramic CLI installed as instructed above , simply run the daemon command: ceramic daemon","title":"Local Ceramic daemon (default)"},{"location":"guides/cli/#bootstrap-ceramic-for-idx","text":"The IDX library relies on some Ceramic streams used as schemas and definitions from the IDX specifications to be accessible on the Ceramic network. When using the main Ceramic network and public testnets it is likely these streams would already be present, but for private test networks and local nodes, you may have to ensure these streams are created before using IDX. In order to bootstrap a Ceramic network with the necessary IDX streams, simply run the bootstrap command: idx bootstrap","title":"Bootstrap Ceramic for IDX"},{"location":"guides/cli/#create-your-did","text":"IDX uses Decentralized Identifiers (DID) for authentication and Identity Index streams are therefore controlled by a DID. Before being able to interact with the Identity Index stream, it is necessary to create the DID that will control it. This can easily be done using the IDX CLI: idx did:create --label = me Here we also set the optional label flag as a local identifier for the DID, providing a simpler way to reference it. It is possible to display all the locally created DIDs and their labels by running the did:list command: idx did:list","title":"Create your DID"},{"location":"guides/cli/#inspect-the-idx-index-contents","text":"By running then index:inspect it is possible to inspect the IDX index contents associated to a DID. Assuming you have created a DID using the step above, you can run the following command: idx index:inspect me","title":"Inspect the IDX index contents"},{"location":"guides/cli/#interact-with-idx","text":"Finally, once all the steps above have been successfully followed, you can start interacting with contents in your Identity Index, for example setting your basic profile using the provided IDX definition: idx index:set me basicProfile '{\"name\":\"Alice\"}' By running the index:get command, you can check the stored record: idx index:get me basicProfile All the commands provided by the IDX CLI can be found in the CLI documentation .","title":"Interact with IDX"},{"location":"guides/advanced%20development/bootstrap-script/","text":"","title":"Bootstrap script"},{"location":"guides/advanced%20development/server-side-rendering/","text":"Clayground \u00b6 Clayground is a docker container that simplifies deployment of the end-to-end suite of Ceramic infrastructure needed for local development and testing. Clayground runs on a local testnet . Components \u00b6 When run, Clayground will deploy: 1 2 3 4 Prerequisites \u00b6 Installation \u00b6 Usage \u00b6","title":"Clayground"},{"location":"guides/advanced%20development/server-side-rendering/#clayground","text":"Clayground is a docker container that simplifies deployment of the end-to-end suite of Ceramic infrastructure needed for local development and testing. Clayground runs on a local testnet .","title":"Clayground"},{"location":"guides/advanced%20development/server-side-rendering/#components","text":"When run, Clayground will deploy: 1 2 3 4","title":"Components"},{"location":"guides/advanced%20development/server-side-rendering/#prerequisites","text":"","title":"Prerequisites"},{"location":"guides/advanced%20development/server-side-rendering/#installation","text":"","title":"Installation"},{"location":"guides/advanced%20development/server-side-rendering/#usage","text":"","title":"Usage"},{"location":"guides/definitions/creating/","text":"Creating definitions \u00b6 If you are not able to only use default definitions or existing definitions , then you will need to create new definitions for your project. Creating new definitions allows your application to write records and read records specifically suited to your use case. Prerequisites \u00b6 Make sure you have installed the IDX CLI and that the Ceramic daemon is running properly. You need to be connected to a Ceramic node that you can write to. Step 1: Define your records \u00b6 Consider your application's data model as a set of discrete records . Each record should store a logical subset of information for your project. DID -> Index -> Definition -> Record ^ Schema For demonstration purposes, this guide will use the example of a simple note-taking application that needs to manage a basic profile and a collection of notes. Therefore, this application would use two records: A record to store a profile ( basicProfile ) A record to store a list of notes ( notesList ) The individual notes objects can be stored in any external datastore , but we will assume these notes are stored in Ceramic streams . Writing these individual notes will need to be handled by the API of your datastore and is beyond the scope of IDX. An IDX record will just be used to maintain the user's list of notes. Step 2: Create your schemas \u00b6 Create JSON schemas to define the data format of your records. All schemas must comply with JSON schema draft 07. Specify your schemas \u00b6 Specify each schema in JSON schema format. Because we are using two records in this example, we will need two schemas. basicProfile schema \u00b6 Schema { \"$schema\" : \"http://json-schema.org/draft-07/schema#\" , \"title\" : \"BasicProfile\" , \"type\" : \"object\" , \"properties\" : { \"name\" : { \"type\" : \"string\" , \"maxLength\" : 150 }, \"image\" : { \"$ref\" : \"#/definitions/imageSources\" }, \"description\" : { \"type\" : \"string\" , \"maxLength\" : 420 }, \"emoji\" : { \"type\" : \"string\" , \"maxLength\" : 2 }, \"background\" : { \"$ref\" : \"#/definitions/imageSources\" }, \"birthDate\" : { \"type\" : \"string\" , \"format\" : \"date\" , \"maxLength\" : 10 }, \"url\" : { \"type\" : \"string\" , \"maxLength\" : 240 }, \"gender\" : { \"type\" : \"string\" , \"maxLength\" : 42 }, \"homeLocation\" : { \"type\" : \"string\" , \"maxLength\" : 140 }, \"residenceCountry\" : { \"type\" : \"string\" , \"pattern\" : \"^[A-Z]{2}$\" , \"maxLength\" : 2 }, \"nationalities\" : { \"type\" : \"array\" , \"minItems\" : 1 , \"items\" : { \"type\" : \"string\" , \"pattern\" : \"^[A-Z]{2}$\" , \"maxItems\" : 5 } }, \"affiliations\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"string\" , \"maxLength\" : 140 } } }, \"definitions\" : { \"IPFSUrl\" : { \"type\" : \"string\" , \"pattern\" : \"^ipfs://.+\" , \"maxLength\" : 150 }, \"positiveInteger\" : { \"type\" : \"integer\" , \"minimum\" : 1 }, \"imageMetadata\" : { \"type\" : \"object\" , \"properties\" : { \"src\" : { \"$ref\" : \"#/definitions/IPFSUrl\" }, \"mimeType\" : { \"type\" : \"string\" , \"maxLength\" : 50 }, \"width\" : { \"$ref\" : \"#/definitions/positiveInteger\" }, \"height\" : { \"$ref\" : \"#/definitions/positiveInteger\" }, \"size\" : { \"$ref\" : \"#/definitions/positiveInteger\" } }, \"required\" : [ \"src\" , \"mimeType\" , \"width\" , \"height\" ] }, \"imageSources\" : { \"type\" : \"object\" , \"properties\" : { \"original\" : { \"$ref\" : \"#/definitions/imageMetadata\" }, \"alternatives\" : { \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/definitions/imageMetadata\" } } }, \"required\" : [ \"original\" ] } } } Example record { name : 'Alan Turing' , description : 'I make computers beep good.' , emoji : '\ud83d\udcbb' } notesList schema \u00b6 Schema { $schema : 'http://json-schema.org/draft-07/schema' , title : 'NotesList' , type : 'object' , properties : { notes : { type : 'array' , title : 'notes' , items : { type : 'object' , title : 'NoteItem' , properties : { id : { $ref : '#/definitions/CeramicDocId' , }, title : { type : 'string' , title : 'title' , maxLength : 100 , }, }, }, }, }, required : [ 'notes' ], definitions : { CeramicDocId : { type : 'string' , pattern : '^ceramic://.+(\\\\?version=.+)?' , maxLength : 150 , }, }, } Example record { notes : [ { id : 'kyz123...123' }, { id : 'kyz123...456' }, { id : 'kyz123...789' }, ] } Publish your schemas \u00b6 Use the schema:publish command on the IDX CLI to publish each of your schemas. You will need to do this for each of your two schemas above. idx schema:publish <DID> 'your schema' Command idx schema:publish did:key:z6MkuEd4fm7qNq8hkmWFM1NLVBAXa4t2GcNDdmVzBrRm2DNm '{\"$schema\":\"http://json-schema.org/draft-07/schema\",\"title\":\"NotesList\",\"type\":\"object\",\"properties\":{\"notes\":{\"type\":\"array\",\"title\":\"notes\",\"items\":{\"type\":\"object\",\"title\":\"NoteItem\",\"properties\":{\"id\":{\"$ref\":\"#/definitions/CeramicDocId\"},\"title\":{\"type\":\"string\",\"title\":\"title\",\"maxLength\":100}}}}},\"required\":[\"notes\"],\"definitions\":{\"CeramicDocId\":{\"type\":\"string\",\"pattern\":\"^ceramic://.+(\\\\\\\\?version=.+)?\",\"maxLength\":150}}}' Output \u2714 Schema published with URL: ceramic://k3y52l7qbv1frxrczisvgwekml7jrdiriv60qrbm80r3uabcl7dqva1rq5rk6b94w Step 3: Create your definitions \u00b6 Create definitions that will act as keys for your records in the index. Definitions include the schema URLs from above and additional metadata. Specify your definitions \u00b6 Because we are using two records in our example, we will need to create two definitions. basicProfile definition \u00b6 { name : 'Profile' , description : 'A basic user profile' , // optional schema : '<schema URL from previous command>' , config : {}, //optional } notesList definition \u00b6 { name : 'Notes' , description : 'A list of notes' , // optional schema : '<schema URL from previous command>' , config : {} //optional } Publish your definitions \u00b6 Use the definition:create command on the IDX CLI to publish each of your definitions. idx definition:create <DID> --schema = <schema URL from previous command> --name = \"definition name\" --description = \"definition description\" Example command idx definition:create did:key:z6MkuEd4fm7qNq8hkmWFM1NLVBAXa4t2GcNDdmVzBrRm2DNm --schema = 'ceramic://k3y52l7qbv1frxrczisvgwekml7jrdiriv60qrbm80r3uabcl7dqva1rq5rk6b94w' --name = \"Notes list\" --description = \"A list of notes\" Example response \u2714 Definition successfully created: kjzl6cwe1jw149hunt8wb296aprqjjja96q5etjs2oh97s0t9eku9fuz5or3w1z Step 4: Add to your project \u00b6 Add the definitionIDs of the definitions that you just created to the aliases object in your project's JavaScript file. This will allow you to use them to read records and write records using the IDX API during runtime. const aliases = { basicProfile : 'kjzl6cwe1jw14bdsytwychcd91fcc7xibfj8bc0r2h3w5wm8t6rt4dtlrotl1ou' , notesList : 'kjzl6cwe1jw149hunt8wb296aprqjjja96q5etjs2oh97s0t9eku9fuz5or3w1z' , }","title":"Creating definitions"},{"location":"guides/definitions/creating/#creating-definitions","text":"If you are not able to only use default definitions or existing definitions , then you will need to create new definitions for your project. Creating new definitions allows your application to write records and read records specifically suited to your use case.","title":"Creating definitions"},{"location":"guides/definitions/creating/#prerequisites","text":"Make sure you have installed the IDX CLI and that the Ceramic daemon is running properly. You need to be connected to a Ceramic node that you can write to.","title":"Prerequisites"},{"location":"guides/definitions/creating/#step-1-define-your-records","text":"Consider your application's data model as a set of discrete records . Each record should store a logical subset of information for your project. DID -> Index -> Definition -> Record ^ Schema For demonstration purposes, this guide will use the example of a simple note-taking application that needs to manage a basic profile and a collection of notes. Therefore, this application would use two records: A record to store a profile ( basicProfile ) A record to store a list of notes ( notesList ) The individual notes objects can be stored in any external datastore , but we will assume these notes are stored in Ceramic streams . Writing these individual notes will need to be handled by the API of your datastore and is beyond the scope of IDX. An IDX record will just be used to maintain the user's list of notes.","title":"Step 1: Define your records"},{"location":"guides/definitions/creating/#step-2-create-your-schemas","text":"Create JSON schemas to define the data format of your records. All schemas must comply with JSON schema draft 07.","title":"Step 2: Create your schemas"},{"location":"guides/definitions/creating/#specify-your-schemas","text":"Specify each schema in JSON schema format. Because we are using two records in this example, we will need two schemas.","title":"Specify your schemas"},{"location":"guides/definitions/creating/#publish-your-schemas","text":"Use the schema:publish command on the IDX CLI to publish each of your schemas. You will need to do this for each of your two schemas above. idx schema:publish <DID> 'your schema' Command idx schema:publish did:key:z6MkuEd4fm7qNq8hkmWFM1NLVBAXa4t2GcNDdmVzBrRm2DNm '{\"$schema\":\"http://json-schema.org/draft-07/schema\",\"title\":\"NotesList\",\"type\":\"object\",\"properties\":{\"notes\":{\"type\":\"array\",\"title\":\"notes\",\"items\":{\"type\":\"object\",\"title\":\"NoteItem\",\"properties\":{\"id\":{\"$ref\":\"#/definitions/CeramicDocId\"},\"title\":{\"type\":\"string\",\"title\":\"title\",\"maxLength\":100}}}}},\"required\":[\"notes\"],\"definitions\":{\"CeramicDocId\":{\"type\":\"string\",\"pattern\":\"^ceramic://.+(\\\\\\\\?version=.+)?\",\"maxLength\":150}}}' Output \u2714 Schema published with URL: ceramic://k3y52l7qbv1frxrczisvgwekml7jrdiriv60qrbm80r3uabcl7dqva1rq5rk6b94w","title":"Publish your schemas"},{"location":"guides/definitions/creating/#step-3-create-your-definitions","text":"Create definitions that will act as keys for your records in the index. Definitions include the schema URLs from above and additional metadata.","title":"Step 3: Create your definitions"},{"location":"guides/definitions/creating/#specify-your-definitions","text":"Because we are using two records in our example, we will need to create two definitions.","title":"Specify your definitions"},{"location":"guides/definitions/creating/#publish-your-definitions","text":"Use the definition:create command on the IDX CLI to publish each of your definitions. idx definition:create <DID> --schema = <schema URL from previous command> --name = \"definition name\" --description = \"definition description\" Example command idx definition:create did:key:z6MkuEd4fm7qNq8hkmWFM1NLVBAXa4t2GcNDdmVzBrRm2DNm --schema = 'ceramic://k3y52l7qbv1frxrczisvgwekml7jrdiriv60qrbm80r3uabcl7dqva1rq5rk6b94w' --name = \"Notes list\" --description = \"A list of notes\" Example response \u2714 Definition successfully created: kjzl6cwe1jw149hunt8wb296aprqjjja96q5etjs2oh97s0t9eku9fuz5or3w1z","title":"Publish your definitions"},{"location":"guides/definitions/creating/#step-4-add-to-your-project","text":"Add the definitionIDs of the definitions that you just created to the aliases object in your project's JavaScript file. This will allow you to use them to read records and write records using the IDX API during runtime. const aliases = { basicProfile : 'kjzl6cwe1jw14bdsytwychcd91fcc7xibfj8bc0r2h3w5wm8t6rt4dtlrotl1ou' , notesList : 'kjzl6cwe1jw149hunt8wb296aprqjjja96q5etjs2oh97s0t9eku9fuz5or3w1z' , }","title":"Step 4: Add to your project"},{"location":"guides/definitions/default/","text":"Default definitions \u00b6 Default definitions are definitions included in IDX libraries by default. Their aliases can automatically be used to read records and write records without any additional configuration. You do not need to add default definitions to your project's aliases object. Basic Profile \u00b6 The basic profile definition specifies a record which stores a general-purpose, universal profile for a DID. Interact with this record using the basicProfile alias. Definition { name : 'Basic Profile' , description : 'Basic profile information for a DID' , schema : 'ceramic://k3y52l7qbv1frxjdr9qpn9ldvbxb0jg4eig7wtjkdu6gk84vyazw9j4txf4o6d2io' , } Schema { \"$schema\" : \"http://json-schema.org/draft-07/schema#\" , \"title\" : \"BasicProfile\" , \"type\" : \"object\" , \"properties\" : { \"name\" : { \"type\" : \"string\" , \"maxLength\" : 150 }, \"image\" : { \"$ref\" : \"#/definitions/imageSources\" }, \"description\" : { \"type\" : \"string\" , \"maxLength\" : 420 }, \"emoji\" : { \"type\" : \"string\" , \"maxLength\" : 2 }, \"background\" : { \"$ref\" : \"#/definitions/imageSources\" }, \"birthDate\" : { \"type\" : \"string\" , \"format\" : \"date\" , \"maxLength\" : 10 }, \"url\" : { \"type\" : \"string\" , \"maxLength\" : 240 }, \"gender\" : { \"type\" : \"string\" , \"maxLength\" : 42 }, \"homeLocation\" : { \"type\" : \"string\" , \"maxLength\" : 140 }, \"residenceCountry\" : { \"type\" : \"string\" , \"pattern\" : \"^[A-Z]{2}$\" , \"maxLength\" : 2 }, \"nationalities\" : { \"type\" : \"array\" , \"minItems\" : 1 , \"items\" : { \"type\" : \"string\" , \"pattern\" : \"^[A-Z]{2}$\" , \"maxItems\" : 5 } }, \"affiliations\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"string\" , \"maxLength\" : 140 } } }, \"definitions\" : { \"IPFSUrl\" : { \"type\" : \"string\" , \"pattern\" : \"^ipfs://.+\" , \"maxLength\" : 150 }, \"positiveInteger\" : { \"type\" : \"integer\" , \"minimum\" : 1 }, \"imageMetadata\" : { \"type\" : \"object\" , \"properties\" : { \"src\" : { \"$ref\" : \"#/definitions/IPFSUrl\" }, \"mimeType\" : { \"type\" : \"string\" , \"maxLength\" : 50 }, \"width\" : { \"$ref\" : \"#/definitions/positiveInteger\" }, \"height\" : { \"$ref\" : \"#/definitions/positiveInteger\" }, \"size\" : { \"$ref\" : \"#/definitions/positiveInteger\" } }, \"required\" : [ \"src\" , \"mimeType\" , \"width\" , \"height\" ] }, \"imageSources\" : { \"type\" : \"object\" , \"properties\" : { \"original\" : { \"$ref\" : \"#/definitions/imageMetadata\" }, \"alternatives\" : { \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/definitions/imageMetadata\" } } }, \"required\" : [ \"original\" ] } } } Example record { name : 'Alan Turing' , description : 'I make computers beep good.' , emoji : '\ud83d\udcbb' } For more information, see Basic Profile Definition (CIP-19) . Crypto Accounts \u00b6 The crypto accounts definition specifies a record which stores a list of cryptographic identities that belong to a DID. Interact with this record using the cryptoAccounts alias. Definition { name : 'Crypto Accounts' , description : 'Crypto accounts linked to your DID' , schema : 'ceramic://k3y52l7qbv1fry6z45y9s2w5npe0nyokbp0oiv1tdhvswhv07lb2v13zdz4i1bp4w' , } Schema { \"$schema\" : \"http://json-schema.org/draft-07/schema#\" , \"type\" : \"object\" , \"title\" : \"CryptoAccountLinks\" , \"patternProperties\" : { \"^[a-zA-Z0-9]{1,63}@[-a-zA-Z0-9]{3,16}:[-a-zA-Z0-9]{1,47}\" : { \"type\" : \"string\" , \"pattern\" : \"^ceramic://.+\" , \"maxLength\" : 1024 } }, \"propertyNames\" : { \"maxLength\" : 1024 }, \"additionalProperties\" : false } Example record { '0x123@eip155:1' : 'ceramic://kjz123...456' , // Ethereum acct and proof '0x123@polkadot:b0a...70f' : 'ceramic://kjz987...654' , // Polkadot acct and proof '0x123@fil:f' : 'ceramic://kjz528...912' , // Filecoin acct and proof '0x134@cosmos:cosmoshub-2' : 'ceramic://kjz382...565' // Cosmos acct and proof } 3ID Keychain \u00b6 The 3ID keychain definition specifies a record which stores encrypted authentication secrets for a 3ID DID. It allows a 3ID to be authenticated using any number of public key cryptographic accounts and is how DIDs can be authenticated using existing blockchain wallets. Interact with this record using the threeIdKeychain alias. Definition { name : '3ID Keychain' , description : 'Key data for 3ID' , schema : 'ceramic://k3y52l7qbv1fry69sodu0hc4nwvzglaxxvy3l0xdw7v1o36gyu2dl9us472qh8veo' , } Schema { \"$schema\" : \"http://json-schema.org/draft-07/schema#\" , \"definitions\" : { \"JWE\" : { \"title\" : \"JWE\" , \"type\" : \"object\" , \"properties\" : { \"protected\" : { \"type\" : \"string\" }, \"iv\" : { \"type\" : \"string\" }, \"ciphertext\" : { \"type\" : \"string\" }, \"tag\" : { \"type\" : \"string\" }, \"aad\" : { \"type\" : \"string\" }, \"recipients\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"object\" , \"properties\" : { \"header\" : { \"type\" : \"object\" }, \"encrypted_key\" : { \"type\" : \"string\" } }, \"required\" : [ \"header\" , \"encrypted_key\" ] } } }, \"required\" : [ \"protected\" , \"iv\" , \"ciphertext\" , \"tag\" ] }, \"WrappedJWE\" : { \"type\" : \"object\" , \"additionalProperties\" : false , \"properties\" : { \"jwe\" : { \"$ref\" : \"#/definitions/JWE\" } } }, \"AuthData\" : { \"type\" : \"object\" , \"additionalProperties\" : false , \"properties\" : { \"id\" : { \"$ref\" : \"#/definitions/WrappedJWE\" }, \"pub\" : { \"type\" : \"string\" }, \"data\" : { \"$ref\" : \"#/definitions/WrappedJWE\" } } } }, \"type\" : \"object\" , \"additionalProperties\" : false , \"properties\" : { \"authMap\" : { \"type\" : \"object\" , \"additionalProperties\" : { \"$ref\" : \"#/definitions/AuthData\" } }, \"pastSeeds\" : { \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/definitions/JWE\" } } } } Example record Adding new defaults If you would like to add a new default definition to this list, submit a pull request to idx-constants on Github. For your pull request to be accepted: The definition must be captured by a CIP (Ceramic improvement proposal) The schema used in the definition must be captured by a CIP The definition must provide general utility to a large number of IDX applications","title":"Default definitions"},{"location":"guides/definitions/default/#default-definitions","text":"Default definitions are definitions included in IDX libraries by default. Their aliases can automatically be used to read records and write records without any additional configuration. You do not need to add default definitions to your project's aliases object.","title":"Default definitions"},{"location":"guides/definitions/default/#basic-profile","text":"The basic profile definition specifies a record which stores a general-purpose, universal profile for a DID. Interact with this record using the basicProfile alias. Definition { name : 'Basic Profile' , description : 'Basic profile information for a DID' , schema : 'ceramic://k3y52l7qbv1frxjdr9qpn9ldvbxb0jg4eig7wtjkdu6gk84vyazw9j4txf4o6d2io' , } Schema { \"$schema\" : \"http://json-schema.org/draft-07/schema#\" , \"title\" : \"BasicProfile\" , \"type\" : \"object\" , \"properties\" : { \"name\" : { \"type\" : \"string\" , \"maxLength\" : 150 }, \"image\" : { \"$ref\" : \"#/definitions/imageSources\" }, \"description\" : { \"type\" : \"string\" , \"maxLength\" : 420 }, \"emoji\" : { \"type\" : \"string\" , \"maxLength\" : 2 }, \"background\" : { \"$ref\" : \"#/definitions/imageSources\" }, \"birthDate\" : { \"type\" : \"string\" , \"format\" : \"date\" , \"maxLength\" : 10 }, \"url\" : { \"type\" : \"string\" , \"maxLength\" : 240 }, \"gender\" : { \"type\" : \"string\" , \"maxLength\" : 42 }, \"homeLocation\" : { \"type\" : \"string\" , \"maxLength\" : 140 }, \"residenceCountry\" : { \"type\" : \"string\" , \"pattern\" : \"^[A-Z]{2}$\" , \"maxLength\" : 2 }, \"nationalities\" : { \"type\" : \"array\" , \"minItems\" : 1 , \"items\" : { \"type\" : \"string\" , \"pattern\" : \"^[A-Z]{2}$\" , \"maxItems\" : 5 } }, \"affiliations\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"string\" , \"maxLength\" : 140 } } }, \"definitions\" : { \"IPFSUrl\" : { \"type\" : \"string\" , \"pattern\" : \"^ipfs://.+\" , \"maxLength\" : 150 }, \"positiveInteger\" : { \"type\" : \"integer\" , \"minimum\" : 1 }, \"imageMetadata\" : { \"type\" : \"object\" , \"properties\" : { \"src\" : { \"$ref\" : \"#/definitions/IPFSUrl\" }, \"mimeType\" : { \"type\" : \"string\" , \"maxLength\" : 50 }, \"width\" : { \"$ref\" : \"#/definitions/positiveInteger\" }, \"height\" : { \"$ref\" : \"#/definitions/positiveInteger\" }, \"size\" : { \"$ref\" : \"#/definitions/positiveInteger\" } }, \"required\" : [ \"src\" , \"mimeType\" , \"width\" , \"height\" ] }, \"imageSources\" : { \"type\" : \"object\" , \"properties\" : { \"original\" : { \"$ref\" : \"#/definitions/imageMetadata\" }, \"alternatives\" : { \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/definitions/imageMetadata\" } } }, \"required\" : [ \"original\" ] } } } Example record { name : 'Alan Turing' , description : 'I make computers beep good.' , emoji : '\ud83d\udcbb' } For more information, see Basic Profile Definition (CIP-19) .","title":"Basic Profile"},{"location":"guides/definitions/default/#crypto-accounts","text":"The crypto accounts definition specifies a record which stores a list of cryptographic identities that belong to a DID. Interact with this record using the cryptoAccounts alias. Definition { name : 'Crypto Accounts' , description : 'Crypto accounts linked to your DID' , schema : 'ceramic://k3y52l7qbv1fry6z45y9s2w5npe0nyokbp0oiv1tdhvswhv07lb2v13zdz4i1bp4w' , } Schema { \"$schema\" : \"http://json-schema.org/draft-07/schema#\" , \"type\" : \"object\" , \"title\" : \"CryptoAccountLinks\" , \"patternProperties\" : { \"^[a-zA-Z0-9]{1,63}@[-a-zA-Z0-9]{3,16}:[-a-zA-Z0-9]{1,47}\" : { \"type\" : \"string\" , \"pattern\" : \"^ceramic://.+\" , \"maxLength\" : 1024 } }, \"propertyNames\" : { \"maxLength\" : 1024 }, \"additionalProperties\" : false } Example record { '0x123@eip155:1' : 'ceramic://kjz123...456' , // Ethereum acct and proof '0x123@polkadot:b0a...70f' : 'ceramic://kjz987...654' , // Polkadot acct and proof '0x123@fil:f' : 'ceramic://kjz528...912' , // Filecoin acct and proof '0x134@cosmos:cosmoshub-2' : 'ceramic://kjz382...565' // Cosmos acct and proof }","title":"Crypto Accounts"},{"location":"guides/definitions/default/#3id-keychain","text":"The 3ID keychain definition specifies a record which stores encrypted authentication secrets for a 3ID DID. It allows a 3ID to be authenticated using any number of public key cryptographic accounts and is how DIDs can be authenticated using existing blockchain wallets. Interact with this record using the threeIdKeychain alias. Definition { name : '3ID Keychain' , description : 'Key data for 3ID' , schema : 'ceramic://k3y52l7qbv1fry69sodu0hc4nwvzglaxxvy3l0xdw7v1o36gyu2dl9us472qh8veo' , } Schema { \"$schema\" : \"http://json-schema.org/draft-07/schema#\" , \"definitions\" : { \"JWE\" : { \"title\" : \"JWE\" , \"type\" : \"object\" , \"properties\" : { \"protected\" : { \"type\" : \"string\" }, \"iv\" : { \"type\" : \"string\" }, \"ciphertext\" : { \"type\" : \"string\" }, \"tag\" : { \"type\" : \"string\" }, \"aad\" : { \"type\" : \"string\" }, \"recipients\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"object\" , \"properties\" : { \"header\" : { \"type\" : \"object\" }, \"encrypted_key\" : { \"type\" : \"string\" } }, \"required\" : [ \"header\" , \"encrypted_key\" ] } } }, \"required\" : [ \"protected\" , \"iv\" , \"ciphertext\" , \"tag\" ] }, \"WrappedJWE\" : { \"type\" : \"object\" , \"additionalProperties\" : false , \"properties\" : { \"jwe\" : { \"$ref\" : \"#/definitions/JWE\" } } }, \"AuthData\" : { \"type\" : \"object\" , \"additionalProperties\" : false , \"properties\" : { \"id\" : { \"$ref\" : \"#/definitions/WrappedJWE\" }, \"pub\" : { \"type\" : \"string\" }, \"data\" : { \"$ref\" : \"#/definitions/WrappedJWE\" } } } }, \"type\" : \"object\" , \"additionalProperties\" : false , \"properties\" : { \"authMap\" : { \"type\" : \"object\" , \"additionalProperties\" : { \"$ref\" : \"#/definitions/AuthData\" } }, \"pastSeeds\" : { \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/definitions/JWE\" } } } } Example record Adding new defaults If you would like to add a new default definition to this list, submit a pull request to idx-constants on Github. For your pull request to be accepted: The definition must be captured by a CIP (Ceramic improvement proposal) The schema used in the definition must be captured by a CIP The definition must provide general utility to a large number of IDX applications","title":"3ID Keychain"},{"location":"guides/definitions/existing/","text":"Existing definitions \u00b6 When deciding which definitions to use in your project, you might consider utilizing existing definitions. Existing definitions allow your application to read records and write records originally created by another application. This enables simple cross-application data sharing. Ways to discover definitions \u00b6 There are two primary mechanisms for discovering existing definitions: Inspect the indexes of known DIDs to see which definitions they have Inspect the Github repos of open source projects to see which definitions they're using Inspecting indexes \u00b6 Use the IDX CLI to inspect the indexes of known DIDs. Prerequisites \u00b6 You must have a properly configured IDX CLI. See using the CLI to get started. You must have a list of known DIDs that are relevant to your application, such as existing users or target users. You can get creative assembling this list using any means available to you. It's worth noting that many 3ID DIDs have blockchain accounts publicly linked to their DID, which can be used to lookup their DID from their blockchain account. List all definitions \u00b6 Use the idx index:inspect command to view all definitions for a given DID: idx index:inspect <UserDID> Command idx index:inspect did:key:z6MkuEd4fm7qNq8hkmWFM1NLVBAXa4t2GcNDdmVzBrRm2DNm Output \u2714 IDX document loaded \u2714 kjzl6cwe1jw14bdsytwychcd91fcc7xibfj8bc0r2h3w5wm8t6rt4dtlrotl1ou ( IDX basicProfile ) \u2714 Definition: Basic Profile ( Basic profile information for a DID ) \u2714 Schema: ceramic://k3y52l7qbv1frxjdr9qpn9ldvbxb0jg4eig7wtjkdu6gk84vyazw9j4txf4o6d2io ( IDX BasicProfile ) This response shows an example of a DID with a basic profile stored in its index. View a definition \u00b6 Use the idx definition:info command to view a given definition. If the provided definition is valid it will display the contents of the definition. If it's invalid it will throw an error. idx definition:info <DefinitionID> Command idx definition:info kjzl6cwe1jw14bdsytwychcd91fcc7xibfj8bc0r2h3w5wm8t6rt4dtlrotl1ou Output \u2714 Definition loaded { name: 'Basic Profile' , schema: 'ceramic://k3y52l7qbv1frxjdr9qpn9ldvbxb0jg4eig7wtjkdu6gk84vyazw9j4txf4o6d2io' , description: 'Basic profile information for a DID' , id: StreamID ( kjzl6cwe1jw14bdsytwychcd91fcc7xibfj8bc0r2h3w5wm8t6rt4dtlrotl1ou ) } View a schema \u00b6 Use the idx definition:schema command to view the schema for a given definition: idx definition:schema <SchemaID> Command idx definition:schema kjzl6cwe1jw14blngzz896wlixmclprl7nxkpj9s1fgiph2quok8894q7f5mkk0 Output \u2714 Schema loaded { type: 'object' , title: 'BasicProfile' , '$schema' : 'http://json-schema.org/draft-07/schema#' , properties: { url: { type: 'string' , maxLength: 240 } , name: { type: 'string' , maxLength: 150 } , emoji: { type: 'string' , maxLength: 2 } , image: { '$ref' : '#/definitions/imageSources' } , gender: { type: 'string' , maxLength: 42 } , birthDate: { type: 'string' , format: 'date' , maxLength: 10 } , background: { '$ref' : '#/definitions/imageSources' } , description: { type: 'string' , maxLength: 420 } , affiliations: { type: 'array' , items: { type: 'string' , maxLength: 140 } } , homeLocation: { type: 'string' , maxLength: 140 } , nationalities: { type: 'array' , items: { type: 'string' , pattern: '^[A-Z]{2}$' , maxItems: 5 } , minItems: 1 } , residenceCountry: { type: 'string' , pattern: '^[A-Z]{2}$' , maxLength: 2 } } , definitions: { IPFSUrl: { type: 'string' , pattern: '^ipfs://.+' , maxLength: 150 } , imageSources: { type: 'object' , required: [ 'original' ] , properties: { original: { '$ref' : '#/definitions/imageMetadata' } , alternatives: { type: 'array' , items: { '$ref' : '#/definitions/imageMetadata' } } } } , imageMetadata: { type: 'object' , required: [ 'src' , 'mimeType' , 'width' , 'height' ] , properties: { src: { '$ref' : '#/definitions/IPFSUrl' } , size: { '$ref' : '#/definitions/positiveInteger' } , width: { '$ref' : '#/definitions/positiveInteger' } , height: { '$ref' : '#/definitions/positiveInteger' } , mimeType: { type: 'string' , maxLength: 50 } } } , positiveInteger: { type: 'integer' , minimum: 1 } } } Inspecting repositories \u00b6 Use Github or other code collaboration platforms to inspect the repositories of open source projects that use IDX. To locate these projects, you can either view the ecosystem page or lookup the Github topics for #idx and #identityindex . Once you find a set of projects, you will be looking for their JavaScript files which perform get and set calls on the IDX API. If they are using aliases , you will see the definitionIDs in their aliases object. Otherwise, you will see definitionIDs directly in their calls. After gathering a list of definitionIDs, follow the steps above to view a definition and view a schema . Add to your project \u00b6 After you have decided which existing definitions you would like to use in your project, add them to the alias object in your JavaScript file as shown in adding aliases .","title":"Existing definitions"},{"location":"guides/definitions/existing/#existing-definitions","text":"When deciding which definitions to use in your project, you might consider utilizing existing definitions. Existing definitions allow your application to read records and write records originally created by another application. This enables simple cross-application data sharing.","title":"Existing definitions"},{"location":"guides/definitions/existing/#ways-to-discover-definitions","text":"There are two primary mechanisms for discovering existing definitions: Inspect the indexes of known DIDs to see which definitions they have Inspect the Github repos of open source projects to see which definitions they're using","title":"Ways to discover definitions"},{"location":"guides/definitions/existing/#inspecting-indexes","text":"Use the IDX CLI to inspect the indexes of known DIDs.","title":"Inspecting indexes"},{"location":"guides/definitions/existing/#prerequisites","text":"You must have a properly configured IDX CLI. See using the CLI to get started. You must have a list of known DIDs that are relevant to your application, such as existing users or target users. You can get creative assembling this list using any means available to you. It's worth noting that many 3ID DIDs have blockchain accounts publicly linked to their DID, which can be used to lookup their DID from their blockchain account.","title":"Prerequisites"},{"location":"guides/definitions/existing/#list-all-definitions","text":"Use the idx index:inspect command to view all definitions for a given DID: idx index:inspect <UserDID> Command idx index:inspect did:key:z6MkuEd4fm7qNq8hkmWFM1NLVBAXa4t2GcNDdmVzBrRm2DNm Output \u2714 IDX document loaded \u2714 kjzl6cwe1jw14bdsytwychcd91fcc7xibfj8bc0r2h3w5wm8t6rt4dtlrotl1ou ( IDX basicProfile ) \u2714 Definition: Basic Profile ( Basic profile information for a DID ) \u2714 Schema: ceramic://k3y52l7qbv1frxjdr9qpn9ldvbxb0jg4eig7wtjkdu6gk84vyazw9j4txf4o6d2io ( IDX BasicProfile ) This response shows an example of a DID with a basic profile stored in its index.","title":"List all definitions"},{"location":"guides/definitions/existing/#view-a-definition","text":"Use the idx definition:info command to view a given definition. If the provided definition is valid it will display the contents of the definition. If it's invalid it will throw an error. idx definition:info <DefinitionID> Command idx definition:info kjzl6cwe1jw14bdsytwychcd91fcc7xibfj8bc0r2h3w5wm8t6rt4dtlrotl1ou Output \u2714 Definition loaded { name: 'Basic Profile' , schema: 'ceramic://k3y52l7qbv1frxjdr9qpn9ldvbxb0jg4eig7wtjkdu6gk84vyazw9j4txf4o6d2io' , description: 'Basic profile information for a DID' , id: StreamID ( kjzl6cwe1jw14bdsytwychcd91fcc7xibfj8bc0r2h3w5wm8t6rt4dtlrotl1ou ) }","title":"View a definition"},{"location":"guides/definitions/existing/#view-a-schema","text":"Use the idx definition:schema command to view the schema for a given definition: idx definition:schema <SchemaID> Command idx definition:schema kjzl6cwe1jw14blngzz896wlixmclprl7nxkpj9s1fgiph2quok8894q7f5mkk0 Output \u2714 Schema loaded { type: 'object' , title: 'BasicProfile' , '$schema' : 'http://json-schema.org/draft-07/schema#' , properties: { url: { type: 'string' , maxLength: 240 } , name: { type: 'string' , maxLength: 150 } , emoji: { type: 'string' , maxLength: 2 } , image: { '$ref' : '#/definitions/imageSources' } , gender: { type: 'string' , maxLength: 42 } , birthDate: { type: 'string' , format: 'date' , maxLength: 10 } , background: { '$ref' : '#/definitions/imageSources' } , description: { type: 'string' , maxLength: 420 } , affiliations: { type: 'array' , items: { type: 'string' , maxLength: 140 } } , homeLocation: { type: 'string' , maxLength: 140 } , nationalities: { type: 'array' , items: { type: 'string' , pattern: '^[A-Z]{2}$' , maxItems: 5 } , minItems: 1 } , residenceCountry: { type: 'string' , pattern: '^[A-Z]{2}$' , maxLength: 2 } } , definitions: { IPFSUrl: { type: 'string' , pattern: '^ipfs://.+' , maxLength: 150 } , imageSources: { type: 'object' , required: [ 'original' ] , properties: { original: { '$ref' : '#/definitions/imageMetadata' } , alternatives: { type: 'array' , items: { '$ref' : '#/definitions/imageMetadata' } } } } , imageMetadata: { type: 'object' , required: [ 'src' , 'mimeType' , 'width' , 'height' ] , properties: { src: { '$ref' : '#/definitions/IPFSUrl' } , size: { '$ref' : '#/definitions/positiveInteger' } , width: { '$ref' : '#/definitions/positiveInteger' } , height: { '$ref' : '#/definitions/positiveInteger' } , mimeType: { type: 'string' , maxLength: 50 } } } , positiveInteger: { type: 'integer' , minimum: 1 } } }","title":"View a schema"},{"location":"guides/definitions/existing/#inspecting-repositories","text":"Use Github or other code collaboration platforms to inspect the repositories of open source projects that use IDX. To locate these projects, you can either view the ecosystem page or lookup the Github topics for #idx and #identityindex . Once you find a set of projects, you will be looking for their JavaScript files which perform get and set calls on the IDX API. If they are using aliases , you will see the definitionIDs in their aliases object. Otherwise, you will see definitionIDs directly in their calls. After gathering a list of definitionIDs, follow the steps above to view a definition and view a schema .","title":"Inspecting repositories"},{"location":"guides/definitions/existing/#add-to-your-project","text":"After you have decided which existing definitions you would like to use in your project, add them to the alias object in your JavaScript file as shown in adding aliases .","title":"Add to your project"},{"location":"guides/storage/ceramic/","text":"Ceramic storage \u00b6 Learn how to use Ceramic streams as external storage for records . This guide only describes how to use Ceramic streams as external storage for records. If you want to directly store or read content in records then you do not need this guide. See writing records or reading records . Prerequisites \u00b6 Install the IDX SDK Add definitions that utilize Ceramic streams for external storage to the aliases object in your project's JavaScript file Installation \u00b6 Since IDX already depends on Ceramic to store protocol data, you will have it installed in your project. You do not need to install any additional software to use Ceramic for external storage. Writing data \u00b6 To write data to IDX records and their external Ceramic streams, you must first authenticate the user's DID. For demonstration purposes, we will use this example of a simple note-taking application . This application will store individual notes in Ceramic streams and a list of these notes will be stored in an IDX record. This IDX record will be identified with the notesList alias and use the described data model . Create a new Ceramic stream \u00b6 Use the TileDocument.create() static method from @ceramicnetwork/stream-tile to create a new note as a Ceramic stream: const stream = await TileDocument . create ( ceramic , { date : new Date (). toISOString (), text : 'Hello world' , }) Add the Ceramic stream to an IDX record \u00b6 Use the idx.set() method from the IDX API to add the StreamID of the note to their notesList record. await idx . set ( 'notesList' , { notes : [{ id : stream . id . toUrl (), title : 'My first note' }], }) Update the Ceramic stream \u00b6 Use the update() method of the TileDocument instance to update the note. await stream . update ({ date : stream . content . date , text : 'Hello Ceramic' }) Reading data \u00b6 Query the IDX record \u00b6 Use the idx.get() method from the IDX API to query the notesList record. In this case it will return a list of StreamIDs that represent the notes. With an authenticated user: await idx . get ( 'notesList' ) With an unauthenticated user: await idx . get ( 'notesList' , '<DID>' ) Query the Ceramic stream \u00b6 Use the TileDocument.load() static method from the @ceramicnetwork/stream-tile to load a stream containing the note. You will need to pass a StreamID from the notesList record above: await TileDocument . load ( ceramic , '<StreamID>' ) More on Ceramic \u00b6 For a full description of Ceramic and how to use it, see the Ceramic documentation .","title":"Ceramic storage"},{"location":"guides/storage/ceramic/#ceramic-storage","text":"Learn how to use Ceramic streams as external storage for records . This guide only describes how to use Ceramic streams as external storage for records. If you want to directly store or read content in records then you do not need this guide. See writing records or reading records .","title":"Ceramic storage"},{"location":"guides/storage/ceramic/#prerequisites","text":"Install the IDX SDK Add definitions that utilize Ceramic streams for external storage to the aliases object in your project's JavaScript file","title":"Prerequisites"},{"location":"guides/storage/ceramic/#installation","text":"Since IDX already depends on Ceramic to store protocol data, you will have it installed in your project. You do not need to install any additional software to use Ceramic for external storage.","title":"Installation"},{"location":"guides/storage/ceramic/#writing-data","text":"To write data to IDX records and their external Ceramic streams, you must first authenticate the user's DID. For demonstration purposes, we will use this example of a simple note-taking application . This application will store individual notes in Ceramic streams and a list of these notes will be stored in an IDX record. This IDX record will be identified with the notesList alias and use the described data model .","title":"Writing data"},{"location":"guides/storage/ceramic/#create-a-new-ceramic-stream","text":"Use the TileDocument.create() static method from @ceramicnetwork/stream-tile to create a new note as a Ceramic stream: const stream = await TileDocument . create ( ceramic , { date : new Date (). toISOString (), text : 'Hello world' , })","title":"Create a new Ceramic stream"},{"location":"guides/storage/ceramic/#add-the-ceramic-stream-to-an-idx-record","text":"Use the idx.set() method from the IDX API to add the StreamID of the note to their notesList record. await idx . set ( 'notesList' , { notes : [{ id : stream . id . toUrl (), title : 'My first note' }], })","title":"Add the Ceramic stream to an IDX record"},{"location":"guides/storage/ceramic/#update-the-ceramic-stream","text":"Use the update() method of the TileDocument instance to update the note. await stream . update ({ date : stream . content . date , text : 'Hello Ceramic' })","title":"Update the Ceramic stream"},{"location":"guides/storage/ceramic/#reading-data","text":"","title":"Reading data"},{"location":"guides/storage/ceramic/#query-the-idx-record","text":"Use the idx.get() method from the IDX API to query the notesList record. In this case it will return a list of StreamIDs that represent the notes. With an authenticated user: await idx . get ( 'notesList' ) With an unauthenticated user: await idx . get ( 'notesList' , '<DID>' )","title":"Query the IDX record"},{"location":"guides/storage/ceramic/#query-the-ceramic-stream","text":"Use the TileDocument.load() static method from the @ceramicnetwork/stream-tile to load a stream containing the note. You will need to pass a StreamID from the notesList record above: await TileDocument . load ( ceramic , '<StreamID>' )","title":"Query the Ceramic stream"},{"location":"guides/storage/ceramic/#more-on-ceramic","text":"For a full description of Ceramic and how to use it, see the Ceramic documentation .","title":"More on Ceramic"},{"location":"guides/storage/textile/","text":"","title":"Textile"},{"location":"learn/ecosystem/","text":"Ecosystem projects \u00b6 This page contains a list of projects built on IDX and the definitions that they use. This list is voluntary and likely does not include many projects in the ecosystem. Adding your project \u00b6 To add your project to this list, edit this page and submit a pull request . All projects \u00b6 Name Type Category Description Default aliases or other definitionsIDs Web Playground App Demo A simple web app that demos Ceramic, IDX, and 3ID Connect Sampi App Social Write, publish, and curate censorship-proof multi-media posts. Follow the feeds of other content creators and subscribe to ActivityStreams using HTTP (similar to RSS). Kontext App Productivity A social bookmarking tool. Self.ID ( coming soon ) App Identity A web interface for managing various identity-related IDX records. basicProfile , cryptoAccounts , threeIdKeychain Portex App Investing Secure crypto portfolio management and social sharing application Supersonic App Influencers Supersonic makes it easy to get advice from experts and fund your favorite blockchain projects DIGID App File sharing An app to upload and share files and certificates using IDX cryptoAccounts , threeIdKeychain IDX Ceramic Todos App Productivity A simple to-do app that uses Ceramic to securely store to-dos in smart documents Daemon.land Dev tools SDK All-in-one dweb development platform. 3ID Connect Dev Tools Wallet An authentication system that works with all blockchain wallets cryptoAccounts , threeIdKeychain Identity Legos Dev Tools Misc A UI for verifying Github and Twitter accounts with IdentityLink; Code that integrates IDX with Sourcecred; and more TrueReview App Social A censorship-resistant reviews platform ColorDAO App Civic ColorDAO helps the citizens of Colorado connect with their government through incentives and take an active role in their community Star Relay App Social \u2b50 Film yourself doing something cool and challenge your friends and their friends to do the same! Own the historical moments of video relay challenges and sponsor your favourite charity cause! LAZY NFT APP App Utility An app that allows you to Lazy Mint and List NFT to Rarible. basicProfile","title":"Ecosystem"},{"location":"learn/ecosystem/#ecosystem-projects","text":"This page contains a list of projects built on IDX and the definitions that they use. This list is voluntary and likely does not include many projects in the ecosystem.","title":"Ecosystem projects"},{"location":"learn/ecosystem/#adding-your-project","text":"To add your project to this list, edit this page and submit a pull request .","title":"Adding your project"},{"location":"learn/ecosystem/#all-projects","text":"Name Type Category Description Default aliases or other definitionsIDs Web Playground App Demo A simple web app that demos Ceramic, IDX, and 3ID Connect Sampi App Social Write, publish, and curate censorship-proof multi-media posts. Follow the feeds of other content creators and subscribe to ActivityStreams using HTTP (similar to RSS). Kontext App Productivity A social bookmarking tool. Self.ID ( coming soon ) App Identity A web interface for managing various identity-related IDX records. basicProfile , cryptoAccounts , threeIdKeychain Portex App Investing Secure crypto portfolio management and social sharing application Supersonic App Influencers Supersonic makes it easy to get advice from experts and fund your favorite blockchain projects DIGID App File sharing An app to upload and share files and certificates using IDX cryptoAccounts , threeIdKeychain IDX Ceramic Todos App Productivity A simple to-do app that uses Ceramic to securely store to-dos in smart documents Daemon.land Dev tools SDK All-in-one dweb development platform. 3ID Connect Dev Tools Wallet An authentication system that works with all blockchain wallets cryptoAccounts , threeIdKeychain Identity Legos Dev Tools Misc A UI for verifying Github and Twitter accounts with IdentityLink; Code that integrates IDX with Sourcecred; and more TrueReview App Social A censorship-resistant reviews platform ColorDAO App Civic ColorDAO helps the citizens of Colorado connect with their government through incentives and take an active role in their community Star Relay App Social \u2b50 Film yourself doing something cool and challenge your friends and their friends to do the same! Own the historical moments of video relay challenges and sponsor your favourite charity cause! LAZY NFT APP App Utility An app that allows you to Lazy Mint and List NFT to Rarible. basicProfile","title":"All projects"},{"location":"learn/glossary/","text":"Glossary \u00b6 Key terms \u00b6 Terms and definitions for key protocol components Index \u00b6 The index is a key-value store stream that stores a list of definitionID to recordID mappings. These mappings repreresent all of the data owned by a given DID. The index is the core component of IDX and each DID has only one. Example index { \"kyz123...456\" : \"ceramic://kyz789...012\" , \"kyz345...678\" : \"ceramic://kyz901...234\" , \"kyz567...890\" : \"ceramic://kyz123...456\" , \"kyz789...012\" : \"ceramic://kyz345...678\" } Definition \u00b6 A definition is a stream which describes a record and its definitionID acts as a key in the index . Definitions contain a schema and other metadata about a record. Definitions are created once by developers and the defiinitionID can be reused as a key in any number of indexes. Example definition { name : 'Basic Profile' , description : 'A simple basic profile.' , schema : 'ceramic://kyz...' } Schema \u00b6 A schema is a stream that contain a JSON schema . The schemaURL of the schema is included in a definition and is used to enforce the data format of a record . Example schema { \"$schema\" : \"http://json-schema.org/draft-07/schema#\" , \"title\" : \"BasicProfile\" , \"type\" : \"object\" , \"properties\" : { \"name\" : { \"type\" : \"string\" , \"maxLength\" : 150 }, \"image\" : { \"$ref\" : \"#/definitions/imageSources\" }, \"description\" : { \"type\" : \"string\" , \"maxLength\" : 420 }, \"emoji\" : { \"type\" : \"string\" , \"maxLength\" : 2 }, \"background\" : { \"$ref\" : \"#/definitions/imageSources\" }, \"birthDate\" : { \"type\" : \"string\" , \"format\" : \"date\" , \"maxLength\" : 10 }, \"url\" : { \"type\" : \"string\" , \"maxLength\" : 240 }, \"gender\" : { \"type\" : \"string\" , \"maxLength\" : 42 }, \"homeLocation\" : { \"type\" : \"string\" , \"maxLength\" : 140 }, \"residenceCountry\" : { \"type\" : \"string\" , \"pattern\" : \"^[A-Z]{2}$\" , \"maxLength\" : 2 }, \"nationalities\" : { \"type\" : \"array\" , \"minItems\" : 1 , \"items\" : { \"type\" : \"string\" , \"pattern\" : \"^[A-Z]{2}$\" , \"maxItems\" : 5 } }, \"affiliations\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"string\" , \"maxLength\" : 140 } } }, \"definitions\" : { \"IPFSUrl\" : { \"type\" : \"string\" , \"pattern\" : \"^ipfs://.+\" , \"maxLength\" : 150 }, \"positiveInteger\" : { \"type\" : \"integer\" , \"minimum\" : 1 }, \"imageMetadata\" : { \"type\" : \"object\" , \"properties\" : { \"src\" : { \"$ref\" : \"#/definitions/IPFSUrl\" }, \"mimeType\" : { \"type\" : \"string\" , \"maxLength\" : 50 }, \"width\" : { \"$ref\" : \"#/definitions/positiveInteger\" }, \"height\" : { \"$ref\" : \"#/definitions/positiveInteger\" }, \"size\" : { \"$ref\" : \"#/definitions/positiveInteger\" } }, \"required\" : [ \"src\" , \"mimeType\" , \"width\" , \"height\" ] }, \"imageSources\" : { \"type\" : \"object\" , \"properties\" : { \"original\" : { \"$ref\" : \"#/definitions/imageMetadata\" }, \"alternatives\" : { \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/definitions/imageMetadata\" } } }, \"required\" : [ \"original\" ] } } } Record \u00b6 A record is a stream which contains the JSON data described by a definition . The recordID of the record acts as a value in the index . Records are unique to users, so different users will have different records for the same definitionID. Records are entirely flexible to your use case, but many developers use them to store content or references to content. Storage \u00b6 Records can be used to directly store content. Typically, they are used to manage a single JSON object such as a profile or a follow list. Example storage record { name : 'Alan Turing' , description : 'I make computers beep good.' , emoji : '\ud83d\udcbb' } References \u00b6 Records can be used to store references to external datastores . Typically these records contain one or more links to a collection of similar files or datastores, such as a list of blog posts or a list of tweets, acting as an entry point to the collection. Example reference record { references : [ 'kyz123...456' , 'kyz789...987' , 'kyz654...321' ] } Related terms \u00b6 Terms and definitions relevant to building with IDX Alias \u00b6 An alias is an application-level construct that makes it easy to reference and interact with definitions in your project. Aliases are mappings from human-readable names to definitionIDs . Example aliases const aliases = { alias1 : 'definitionID 1' , alias2 : 'definitionID 2' , } DID \u00b6 DIDs is the W3C standard for gloablly unique decentralized identifiers. IDX uses DIDs for user identifiers and authentication. There currently are more than 60+ implementations of DIDs, called methods. IDX supports any DID method. Learn more about DIDs in the Ceramic documentation . Example DID did:3:bafy124123123123123123123123123123 CAIP-10 Account ID \u00b6 CAIP-10 Account IDs is a blockchain agnostic way to describe an account on any blockchain. This may be an externally owned key-pair account, or a smart contract account. IDX uses CAIP-10s as a way to lookup the DID of a user using a caip10-link streamType in Ceramic. Learn more in the Ceramic documentation . Example CAIP-10 Account IDs # Ethereum mainnet 0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb@eip155:1 # Bitcoin mainnet 128Lkh3S7CkDTBZ8W7BbpsN3YYizJMp8p6@bip122:000000000019d6689c085ae165831e93 # Cosmos Hub cosmos1t2uflqwqe0fsj0shcfkrvpukewcw40yjj6hdc0@cosmos:cosmoshub-3 # Kusama network 5hmuyxw9xdgbpptgypokw4thfyoe3ryenebr381z9iaegmfy@polkadot:b0a8d493285c2df73290dfb7e61f870f Ceramic \u00b6 Ceramic is a decentralized content management network for mutable data streams. IDX uses Ceramic to store and query IDX streams including indexes , definitions , schemas , and records . Learn more about Ceramic network . Stream \u00b6 A stream is a mutable datastore on Ceramic that contains verifiable data. Streams are identified by StreamIDs . StreamID \u00b6 A StreamID is a unique, immutable identifier for a stream on Ceramic . Example StreamID kyz4bdj4r8dwb4khf9ep3b4wjrh84qbfbh3477wedoe9fn3fsz9mn DefinitionID \u00b6 A definitionID is a StreamID of a definition . IndexID \u00b6 An indexID is a StreamID of an index . SchemaID \u00b6 A schemaID is a StreamID of a schema . SchemaURL \u00b6 A schemaURL is a Ceramic URL for a schema . RecordID \u00b6 A recordID is a StreamID of a record . External datastores \u00b6 External datastores are datastores that provide storage for content beyond records. Oftentimes records will contain references to one or more external datastores.","title":"Glossary"},{"location":"learn/glossary/#glossary","text":"","title":"Glossary"},{"location":"learn/glossary/#key-terms","text":"Terms and definitions for key protocol components","title":"Key terms"},{"location":"learn/glossary/#index","text":"The index is a key-value store stream that stores a list of definitionID to recordID mappings. These mappings repreresent all of the data owned by a given DID. The index is the core component of IDX and each DID has only one. Example index { \"kyz123...456\" : \"ceramic://kyz789...012\" , \"kyz345...678\" : \"ceramic://kyz901...234\" , \"kyz567...890\" : \"ceramic://kyz123...456\" , \"kyz789...012\" : \"ceramic://kyz345...678\" }","title":"Index"},{"location":"learn/glossary/#definition","text":"A definition is a stream which describes a record and its definitionID acts as a key in the index . Definitions contain a schema and other metadata about a record. Definitions are created once by developers and the defiinitionID can be reused as a key in any number of indexes. Example definition { name : 'Basic Profile' , description : 'A simple basic profile.' , schema : 'ceramic://kyz...' }","title":"Definition"},{"location":"learn/glossary/#schema","text":"A schema is a stream that contain a JSON schema . The schemaURL of the schema is included in a definition and is used to enforce the data format of a record . Example schema { \"$schema\" : \"http://json-schema.org/draft-07/schema#\" , \"title\" : \"BasicProfile\" , \"type\" : \"object\" , \"properties\" : { \"name\" : { \"type\" : \"string\" , \"maxLength\" : 150 }, \"image\" : { \"$ref\" : \"#/definitions/imageSources\" }, \"description\" : { \"type\" : \"string\" , \"maxLength\" : 420 }, \"emoji\" : { \"type\" : \"string\" , \"maxLength\" : 2 }, \"background\" : { \"$ref\" : \"#/definitions/imageSources\" }, \"birthDate\" : { \"type\" : \"string\" , \"format\" : \"date\" , \"maxLength\" : 10 }, \"url\" : { \"type\" : \"string\" , \"maxLength\" : 240 }, \"gender\" : { \"type\" : \"string\" , \"maxLength\" : 42 }, \"homeLocation\" : { \"type\" : \"string\" , \"maxLength\" : 140 }, \"residenceCountry\" : { \"type\" : \"string\" , \"pattern\" : \"^[A-Z]{2}$\" , \"maxLength\" : 2 }, \"nationalities\" : { \"type\" : \"array\" , \"minItems\" : 1 , \"items\" : { \"type\" : \"string\" , \"pattern\" : \"^[A-Z]{2}$\" , \"maxItems\" : 5 } }, \"affiliations\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"string\" , \"maxLength\" : 140 } } }, \"definitions\" : { \"IPFSUrl\" : { \"type\" : \"string\" , \"pattern\" : \"^ipfs://.+\" , \"maxLength\" : 150 }, \"positiveInteger\" : { \"type\" : \"integer\" , \"minimum\" : 1 }, \"imageMetadata\" : { \"type\" : \"object\" , \"properties\" : { \"src\" : { \"$ref\" : \"#/definitions/IPFSUrl\" }, \"mimeType\" : { \"type\" : \"string\" , \"maxLength\" : 50 }, \"width\" : { \"$ref\" : \"#/definitions/positiveInteger\" }, \"height\" : { \"$ref\" : \"#/definitions/positiveInteger\" }, \"size\" : { \"$ref\" : \"#/definitions/positiveInteger\" } }, \"required\" : [ \"src\" , \"mimeType\" , \"width\" , \"height\" ] }, \"imageSources\" : { \"type\" : \"object\" , \"properties\" : { \"original\" : { \"$ref\" : \"#/definitions/imageMetadata\" }, \"alternatives\" : { \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/definitions/imageMetadata\" } } }, \"required\" : [ \"original\" ] } } }","title":"Schema"},{"location":"learn/glossary/#record","text":"A record is a stream which contains the JSON data described by a definition . The recordID of the record acts as a value in the index . Records are unique to users, so different users will have different records for the same definitionID. Records are entirely flexible to your use case, but many developers use them to store content or references to content.","title":"Record"},{"location":"learn/glossary/#related-terms","text":"Terms and definitions relevant to building with IDX","title":"Related terms"},{"location":"learn/glossary/#alias","text":"An alias is an application-level construct that makes it easy to reference and interact with definitions in your project. Aliases are mappings from human-readable names to definitionIDs . Example aliases const aliases = { alias1 : 'definitionID 1' , alias2 : 'definitionID 2' , }","title":"Alias"},{"location":"learn/glossary/#did","text":"DIDs is the W3C standard for gloablly unique decentralized identifiers. IDX uses DIDs for user identifiers and authentication. There currently are more than 60+ implementations of DIDs, called methods. IDX supports any DID method. Learn more about DIDs in the Ceramic documentation . Example DID did:3:bafy124123123123123123123123123123","title":"DID"},{"location":"learn/glossary/#caip-10-account-id","text":"CAIP-10 Account IDs is a blockchain agnostic way to describe an account on any blockchain. This may be an externally owned key-pair account, or a smart contract account. IDX uses CAIP-10s as a way to lookup the DID of a user using a caip10-link streamType in Ceramic. Learn more in the Ceramic documentation . Example CAIP-10 Account IDs # Ethereum mainnet 0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb@eip155:1 # Bitcoin mainnet 128Lkh3S7CkDTBZ8W7BbpsN3YYizJMp8p6@bip122:000000000019d6689c085ae165831e93 # Cosmos Hub cosmos1t2uflqwqe0fsj0shcfkrvpukewcw40yjj6hdc0@cosmos:cosmoshub-3 # Kusama network 5hmuyxw9xdgbpptgypokw4thfyoe3ryenebr381z9iaegmfy@polkadot:b0a8d493285c2df73290dfb7e61f870f","title":"CAIP-10 Account ID"},{"location":"learn/glossary/#ceramic","text":"Ceramic is a decentralized content management network for mutable data streams. IDX uses Ceramic to store and query IDX streams including indexes , definitions , schemas , and records . Learn more about Ceramic network .","title":"Ceramic"},{"location":"learn/glossary/#stream","text":"A stream is a mutable datastore on Ceramic that contains verifiable data. Streams are identified by StreamIDs .","title":"Stream"},{"location":"learn/glossary/#streamid","text":"A StreamID is a unique, immutable identifier for a stream on Ceramic . Example StreamID kyz4bdj4r8dwb4khf9ep3b4wjrh84qbfbh3477wedoe9fn3fsz9mn","title":"StreamID"},{"location":"learn/glossary/#definitionid","text":"A definitionID is a StreamID of a definition .","title":"DefinitionID"},{"location":"learn/glossary/#indexid","text":"An indexID is a StreamID of an index .","title":"IndexID"},{"location":"learn/glossary/#schemaid","text":"A schemaID is a StreamID of a schema .","title":"SchemaID"},{"location":"learn/glossary/#schemaurl","text":"A schemaURL is a Ceramic URL for a schema .","title":"SchemaURL"},{"location":"learn/glossary/#recordid","text":"A recordID is a StreamID of a record .","title":"RecordID"},{"location":"learn/glossary/#external-datastores","text":"External datastores are datastores that provide storage for content beyond records. Oftentimes records will contain references to one or more external datastores.","title":"External datastores"},{"location":"learn/overview/","text":"Overview \u00b6 IDX is an identity protocol for open applications. It provides a decentralized index which allows structured data to be associated to a decentralized identifier ( DID ). Data is defined by definitions and stored in records . Components \u00b6 Index \u00b6 The index is a key-value stream which stores a list of definitionID to recordID mappings. { \"kyz123...456\" : \"ceramic://kyz789...012\" , \"kyz345...678\" : \"ceramic://kyz901...234\" , \"kyz567...890\" : \"ceramic://kyz123...456\" , \"kyz789...012\" : \"ceramic://kyz345...678\" } Definition \u00b6 A definition is a stream which describes a record . It is identified by a definitionID . { name : 'Basic Profile' , description : 'A simple basic profile.' , schema : 'ceramic://kyz123...456' } Schema \u00b6 A schema is a stream which contains a JSON schema . It specifies the data format of a record . It is identified by a schemaURL which is included in a definition . { \"$schema\" : \"http://json-schema.org/draft-07/schema#\" , \"title\" : \"BasicProfile\" , \"type\" : \"object\" , \"properties\" : { \"name\" : { \"type\" : \"string\" , \"maxLength\" : 150 }, \"image\" : { \"$ref\" : \"#/definitions/imageSources\" }, \"description\" : { \"type\" : \"string\" , \"maxLength\" : 420 }, \"emoji\" : { \"type\" : \"string\" , \"maxLength\" : 2 }, \"background\" : { \"$ref\" : \"#/definitions/imageSources\" }, \"birthDate\" : { \"type\" : \"string\" , \"format\" : \"date\" , \"maxLength\" : 10 }, \"url\" : { \"type\" : \"string\" , \"maxLength\" : 240 }, \"gender\" : { \"type\" : \"string\" , \"maxLength\" : 42 }, \"homeLocation\" : { \"type\" : \"string\" , \"maxLength\" : 140 }, \"residenceCountry\" : { \"type\" : \"string\" , \"pattern\" : \"^[A-Z]{2}$\" , \"maxLength\" : 2 }, \"nationalities\" : { \"type\" : \"array\" , \"minItems\" : 1 , \"items\" : { \"type\" : \"string\" , \"pattern\" : \"^[A-Z]{2}$\" , \"maxItems\" : 5 } }, \"affiliations\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"string\" , \"maxLength\" : 140 } } }, \"definitions\" : { \"IPFSUrl\" : { \"type\" : \"string\" , \"pattern\" : \"^ipfs://.+\" , \"maxLength\" : 150 }, \"positiveInteger\" : { \"type\" : \"integer\" , \"minimum\" : 1 }, \"imageMetadata\" : { \"type\" : \"object\" , \"properties\" : { \"src\" : { \"$ref\" : \"#/definitions/IPFSUrl\" }, \"mimeType\" : { \"type\" : \"string\" , \"maxLength\" : 50 }, \"width\" : { \"$ref\" : \"#/definitions/positiveInteger\" }, \"height\" : { \"$ref\" : \"#/definitions/positiveInteger\" }, \"size\" : { \"$ref\" : \"#/definitions/positiveInteger\" } }, \"required\" : [ \"src\" , \"mimeType\" , \"width\" , \"height\" ] }, \"imageSources\" : { \"type\" : \"object\" , \"properties\" : { \"original\" : { \"$ref\" : \"#/definitions/imageMetadata\" }, \"alternatives\" : { \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/definitions/imageMetadata\" } } }, \"required\" : [ \"original\" ] } } } Record \u00b6 A record is a stream which contains data specified by a definition. It is identified by a recordID . { name : 'Alan Turing' , description : 'I make computers beep good.' , emoji : '\ud83d\udcbb' } How it works \u00b6 Writing records \u00b6 Developer creates a schema . Developer creates a definition and includes the schemaURL . User creates a record that conforms to the definition. User adds the definitionID and recordID to their index . Learn more about writing records . Reading records \u00b6 Developer queries an index using a DID and a definitionID or alias . Developer gets back the record that corresponds to the definitionID. Learn more about reading records . Why IDX? \u00b6 Eliminate user identities from your server. \u00b6 By relying on DIDs for identifiers and indexes for user tables, you can greatly reduce the amount of sensitive identity information stored on your servers and instead rely on the trust and security of decentralized protocols. Discover and import data from other applications. \u00b6 Unified identities allow you to query a user's index and get access to their entire catalog of data regardless of where the data is stored, what type of database was used, or which application first created the data. This simplifies onboarding by allowing you to bootstrap your application with a rich data set. Store data wherever you want. \u00b6 The index seamlessly integrates with all databases and storage backends so you can choose to store information in whichever technology or combination of technologies best suits the needs of your application. Easily make your data available to other applications. \u00b6 By adding your application's data to the indexes of your users, you are adding it to a global catalog where it can conveniently be consumed by every other application that uses the IDX protocol withouot requiring difficult, one-off data integrations. Seamless integration with all Web3 technologies and blockchains. \u00b6 IDX's cross-ecosystem, technology-agnostic identity protocol seamlessly integrates with all Web3 wallets, blockchain networks, and decentralized storage platforms. IDX identities unify the Web3 ecosystem and deliver seamless cross-platform user experiences. Build with standards and flexible, open source technology. \u00b6 Identity is one of the most important architectural decisions you can make for your project. IDX ensures this is a future-proof one by being flexible, cross-platform, open source, and having strong community support.","title":"Overview"},{"location":"learn/overview/#overview","text":"IDX is an identity protocol for open applications. It provides a decentralized index which allows structured data to be associated to a decentralized identifier ( DID ). Data is defined by definitions and stored in records .","title":"Overview"},{"location":"learn/overview/#components","text":"","title":"Components"},{"location":"learn/overview/#index","text":"The index is a key-value stream which stores a list of definitionID to recordID mappings. { \"kyz123...456\" : \"ceramic://kyz789...012\" , \"kyz345...678\" : \"ceramic://kyz901...234\" , \"kyz567...890\" : \"ceramic://kyz123...456\" , \"kyz789...012\" : \"ceramic://kyz345...678\" }","title":"Index"},{"location":"learn/overview/#definition","text":"A definition is a stream which describes a record . It is identified by a definitionID . { name : 'Basic Profile' , description : 'A simple basic profile.' , schema : 'ceramic://kyz123...456' }","title":"Definition"},{"location":"learn/overview/#schema","text":"A schema is a stream which contains a JSON schema . It specifies the data format of a record . It is identified by a schemaURL which is included in a definition . { \"$schema\" : \"http://json-schema.org/draft-07/schema#\" , \"title\" : \"BasicProfile\" , \"type\" : \"object\" , \"properties\" : { \"name\" : { \"type\" : \"string\" , \"maxLength\" : 150 }, \"image\" : { \"$ref\" : \"#/definitions/imageSources\" }, \"description\" : { \"type\" : \"string\" , \"maxLength\" : 420 }, \"emoji\" : { \"type\" : \"string\" , \"maxLength\" : 2 }, \"background\" : { \"$ref\" : \"#/definitions/imageSources\" }, \"birthDate\" : { \"type\" : \"string\" , \"format\" : \"date\" , \"maxLength\" : 10 }, \"url\" : { \"type\" : \"string\" , \"maxLength\" : 240 }, \"gender\" : { \"type\" : \"string\" , \"maxLength\" : 42 }, \"homeLocation\" : { \"type\" : \"string\" , \"maxLength\" : 140 }, \"residenceCountry\" : { \"type\" : \"string\" , \"pattern\" : \"^[A-Z]{2}$\" , \"maxLength\" : 2 }, \"nationalities\" : { \"type\" : \"array\" , \"minItems\" : 1 , \"items\" : { \"type\" : \"string\" , \"pattern\" : \"^[A-Z]{2}$\" , \"maxItems\" : 5 } }, \"affiliations\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"string\" , \"maxLength\" : 140 } } }, \"definitions\" : { \"IPFSUrl\" : { \"type\" : \"string\" , \"pattern\" : \"^ipfs://.+\" , \"maxLength\" : 150 }, \"positiveInteger\" : { \"type\" : \"integer\" , \"minimum\" : 1 }, \"imageMetadata\" : { \"type\" : \"object\" , \"properties\" : { \"src\" : { \"$ref\" : \"#/definitions/IPFSUrl\" }, \"mimeType\" : { \"type\" : \"string\" , \"maxLength\" : 50 }, \"width\" : { \"$ref\" : \"#/definitions/positiveInteger\" }, \"height\" : { \"$ref\" : \"#/definitions/positiveInteger\" }, \"size\" : { \"$ref\" : \"#/definitions/positiveInteger\" } }, \"required\" : [ \"src\" , \"mimeType\" , \"width\" , \"height\" ] }, \"imageSources\" : { \"type\" : \"object\" , \"properties\" : { \"original\" : { \"$ref\" : \"#/definitions/imageMetadata\" }, \"alternatives\" : { \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/definitions/imageMetadata\" } } }, \"required\" : [ \"original\" ] } } }","title":"Schema"},{"location":"learn/overview/#record","text":"A record is a stream which contains data specified by a definition. It is identified by a recordID . { name : 'Alan Turing' , description : 'I make computers beep good.' , emoji : '\ud83d\udcbb' }","title":"Record"},{"location":"learn/overview/#how-it-works","text":"","title":"How it works"},{"location":"learn/overview/#writing-records","text":"Developer creates a schema . Developer creates a definition and includes the schemaURL . User creates a record that conforms to the definition. User adds the definitionID and recordID to their index . Learn more about writing records .","title":"Writing records"},{"location":"learn/overview/#reading-records","text":"Developer queries an index using a DID and a definitionID or alias . Developer gets back the record that corresponds to the definitionID. Learn more about reading records .","title":"Reading records"},{"location":"learn/overview/#why-idx","text":"","title":"Why IDX?"},{"location":"learn/packages/","text":"Packages \u00b6 Core libraries \u00b6 IDX SDK \u00b6 js-idx is a JavaScript/TypeScript client for adding IDX to your project. It is compatible with any JavaScript environment including vanilla web apps (desktop and mobile browsers), front-end frameworks (React.js, Vue.js, Angular.js, Next.js), server-side frameworks (Node.js), and native mobile frameworks (React Native). Install IDX SDK Utility libraries \u00b6 IDX Constants \u00b6 idx-constants is a library that provides references to the core definitions and schemas supported by IDX. along with TypeScript definitions for their records. Install IDX Constants IDX Tools \u00b6 idx-tools is a library that provides various development utilities such as publishing definitions, publishing schemas, creating Ceramic streams, and checking schemas. Install IDX Tools Developer tools \u00b6 IDX CLI \u00b6 idx-cli is a command line interface for interacting with IDX from the terminal. The CLI is used for creating schemas, creating definitions, discovering definitions, testing, and more during development time. Install IDX CLI","title":"Packages"},{"location":"learn/packages/#packages","text":"","title":"Packages"},{"location":"learn/packages/#core-libraries","text":"","title":"Core libraries"},{"location":"learn/packages/#idx-sdk","text":"js-idx is a JavaScript/TypeScript client for adding IDX to your project. It is compatible with any JavaScript environment including vanilla web apps (desktop and mobile browsers), front-end frameworks (React.js, Vue.js, Angular.js, Next.js), server-side frameworks (Node.js), and native mobile frameworks (React Native). Install IDX SDK","title":"IDX SDK"},{"location":"learn/packages/#utility-libraries","text":"","title":"Utility libraries"},{"location":"learn/packages/#idx-constants","text":"idx-constants is a library that provides references to the core definitions and schemas supported by IDX. along with TypeScript definitions for their records. Install IDX Constants","title":"IDX Constants"},{"location":"learn/packages/#idx-tools","text":"idx-tools is a library that provides various development utilities such as publishing definitions, publishing schemas, creating Ceramic streams, and checking schemas. Install IDX Tools","title":"IDX Tools"},{"location":"learn/packages/#developer-tools","text":"","title":"Developer tools"},{"location":"learn/packages/#idx-cli","text":"idx-cli is a command line interface for interacting with IDX from the terminal. The CLI is used for creating schemas, creating definitions, discovering definitions, testing, and more during development time. Install IDX CLI","title":"IDX CLI"},{"location":"learn/welcome/","text":"IDX is in alpha. Libraries may be unstable and APIs are subject to change. Identity protocol for open applications \u00b6 The web is evolving. As we transition from closed platforms with app-specific identities and siloed information to open ecosystems with user-owned identities and portable data, we need a fundamental redesign of how we manage identities and data online. IDX is an open source decentralized identity protocol that replaces app-specific user tables with a single user-centric index that is shared by all applications. The index provides a unified place where all applications can register and discover data sources associated to a user. The index allows your application to store data in any storage backend, while still providing users with the aggregation, metadata, schemas, and routing required to make this data consumable by any other application. Whether you're developing a fully-featured application that gives users control and portability over their data, building a project that imports existing user data, or just want to learn more about decentralized identity and the IDX protocol, our documentation site has the tools for you. Getting started \u00b6 Quick start Installation Learn the basics \u00b6 Overview Glossary Development Tools \u00b6 JS SDK CLI Resources \u00b6 Developer chat :octicons-octoface-16: Github Twitter License \u00b6 IDX is fully open source and dual-licensed under MIT and Apache 2 .","title":"Welcome"},{"location":"learn/welcome/#identity-protocol-for-open-applications","text":"The web is evolving. As we transition from closed platforms with app-specific identities and siloed information to open ecosystems with user-owned identities and portable data, we need a fundamental redesign of how we manage identities and data online. IDX is an open source decentralized identity protocol that replaces app-specific user tables with a single user-centric index that is shared by all applications. The index provides a unified place where all applications can register and discover data sources associated to a user. The index allows your application to store data in any storage backend, while still providing users with the aggregation, metadata, schemas, and routing required to make this data consumable by any other application. Whether you're developing a fully-featured application that gives users control and portability over their data, building a project that imports existing user data, or just want to learn more about decentralized identity and the IDX protocol, our documentation site has the tools for you.","title":"Identity protocol for open applications"},{"location":"learn/welcome/#getting-started","text":"Quick start Installation","title":"Getting started"},{"location":"learn/welcome/#learn-the-basics","text":"Overview Glossary","title":"Learn the basics"},{"location":"learn/welcome/#development-tools","text":"JS SDK CLI","title":"Development Tools"},{"location":"learn/welcome/#resources","text":"Developer chat :octicons-octoface-16: Github Twitter","title":"Resources"},{"location":"learn/welcome/#license","text":"IDX is fully open source and dual-licensed under MIT and Apache 2 .","title":"License"},{"location":"reference/cli/","text":"IDX CLI Reference \u00b6 Installation \u00b6 npm install --global @ceramicstudio/idx-cli See installing the CLI for a full installation guide. Usage \u00b6 idx COMMAND Commands \u00b6 All of the commands provided by the IDX CLI can be found on Github .","title":"IDX CLI"},{"location":"reference/cli/#idx-cli-reference","text":"","title":"IDX CLI Reference"},{"location":"reference/cli/#installation","text":"npm install --global @ceramicstudio/idx-cli See installing the CLI for a full installation guide.","title":"Installation"},{"location":"reference/cli/#usage","text":"idx COMMAND","title":"Usage"},{"location":"reference/cli/#commands","text":"All of the commands provided by the IDX CLI can be found on Github .","title":"Commands"},{"location":"reference/dependency-apis/","text":"Dependency APIs \u00b6 These interfaces are used by IDX, but provided by other libraries. CeramicApi \u00b6 Ceramic API interface exported by the @ceramicnetwork/common library DID \u00b6 DID instance exported by the dids library DIDProvider \u00b6 DID Provider interface exported by the dids library StreamID \u00b6 StreamID instance exported by the @ceramicnetwork/streamid library TileDocument \u00b6 TileDocument instance exported by the @ceramicnetwork/stream-tile library JWSSignature \u00b6 JWS Signature interface exported by the dids library","title":"Dependency APIs"},{"location":"reference/dependency-apis/#dependency-apis","text":"These interfaces are used by IDX, but provided by other libraries.","title":"Dependency APIs"},{"location":"reference/dependency-apis/#ceramicapi","text":"Ceramic API interface exported by the @ceramicnetwork/common library","title":"CeramicApi"},{"location":"reference/dependency-apis/#did","text":"DID instance exported by the dids library","title":"DID"},{"location":"reference/dependency-apis/#didprovider","text":"DID Provider interface exported by the dids library","title":"DIDProvider"},{"location":"reference/dependency-apis/#streamid","text":"StreamID instance exported by the @ceramicnetwork/streamid library","title":"StreamID"},{"location":"reference/dependency-apis/#tiledocument","text":"TileDocument instance exported by the @ceramicnetwork/stream-tile library","title":"TileDocument"},{"location":"reference/dependency-apis/#jwssignature","text":"JWS Signature interface exported by the dids library","title":"JWSSignature"},{"location":"reference/idx-constants/","text":"IDX Constants Reference \u00b6 Installation \u00b6 npm install @ceramicstudio/idx-constants Constants \u00b6 definitions \u00b6 Exports a record of the core definitions provided by IDX. Returns: PublishedDefinitions schemas \u00b6 Exports a record of the core schemas provided by IDX. Returns: PublishedSchemas","title":"IDX Constants"},{"location":"reference/idx-constants/#idx-constants-reference","text":"","title":"IDX Constants Reference"},{"location":"reference/idx-constants/#installation","text":"npm install @ceramicstudio/idx-constants","title":"Installation"},{"location":"reference/idx-constants/#constants","text":"","title":"Constants"},{"location":"reference/idx-constants/#definitions","text":"Exports a record of the core definitions provided by IDX. Returns: PublishedDefinitions","title":"definitions"},{"location":"reference/idx-constants/#schemas","text":"Exports a record of the core schemas provided by IDX. Returns: PublishedSchemas","title":"schemas"},{"location":"reference/idx-tools/","text":"IDX Tools Reference \u00b6 Installation \u00b6 IDX tools should most likely be installed as a developement dependency, it is not meant to be used at runtime by applications npm install -D @ceramicstudio/idx-tools APIs \u00b6 isValidDefinition() \u00b6 Checks if the provided input is a valid definition . Arguments: definition: unknown Returns: boolean isSecureSchema() \u00b6 Checks if a JSON schema is valid and secure according to Ajv's secure schema . Arguments: schema: Schema Returns: boolean publishIDXConfig() \u00b6 Publishes the signed definitions and schemas provided by IDX to the provided Ceramic instace. Arguments: ceramic: CeramicApi Returns: Promise<PublishedConfig>","title":"IDX Tools"},{"location":"reference/idx-tools/#idx-tools-reference","text":"","title":"IDX Tools Reference"},{"location":"reference/idx-tools/#installation","text":"IDX tools should most likely be installed as a developement dependency, it is not meant to be used at runtime by applications npm install -D @ceramicstudio/idx-tools","title":"Installation"},{"location":"reference/idx-tools/#apis","text":"","title":"APIs"},{"location":"reference/idx-tools/#isvaliddefinition","text":"Checks if the provided input is a valid definition . Arguments: definition: unknown Returns: boolean","title":"isValidDefinition()"},{"location":"reference/idx-tools/#issecureschema","text":"Checks if a JSON schema is valid and secure according to Ajv's secure schema . Arguments: schema: Schema Returns: boolean","title":"isSecureSchema()"},{"location":"reference/idx-tools/#publishidxconfig","text":"Publishes the signed definitions and schemas provided by IDX to the provided Ceramic instace. Arguments: ceramic: CeramicApi Returns: Promise<PublishedConfig>","title":"publishIDXConfig()"},{"location":"reference/idx/","text":"IDX SDK Reference \u00b6 Installation \u00b6 npm install @ceramicstudio/idx IDX class \u00b6 constructor \u00b6 Arguments: options: IDXOptions .authenticated \u00b6 Returns whether a DID is currently authenticated . Returns: boolean .ceramic \u00b6 Returns: CeramicApi .id \u00b6 Returns the DID of the currently authenticated user. Accessing this property will throw an error if the instance is not authenticated. Returns: string .has() \u00b6 Returns whether a record exists in the index for a given DID . Arguments: name: string ( alias or IndexKey ) did?: string = this.id Returns: Promise<boolean> .get() \u00b6 Returns a record in the index for a given DID or Blockchain Account ID . Arguments: name: string ( alias or IndexKey ) did?: string = this.id Returns: Promise<unknown> .set() \u00b6 Sets or modifies a record in the index of the authenticated DID . Arguments: name: string ( alias or IndexKey ) content: unknown options?: CreateOptions (only applied if the record is being created, if it already exists they are ignored) Returns: Promise<StreamID> the recordID of the created record .merge() \u00b6 Performs a shallow (one level) merge to a record in the index of the authenticated DID . Arguments: name: string ( alias or IndexKey ) content: unknown options?: CreateOptions (only applied if the record is being created, if it already exists they are ignored) Returns: Promise<StreamID> the recordID of the created record .setAll() \u00b6 Similar to the .set() method but for setting multiple records at once in a more efficient way. The index will only get updated if all records are successfully set. Arguments: contents: Record<string, unknown> options?: CreateOptions (only applied if the record is being created, if it already exists they are ignored) Returns: Promise<Record<string, string>> the recordIDs of the created records .setDefaults() \u00b6 Similar to the .setAll() method but only sets records for keys that are not already present in the index . contents: Record<string, unknown> options?: CreateOptions (only applied if the record is being created, if it already exists they are ignored) Returns: Promise<Record<string, string>> the recordIDs of the created records .remove() \u00b6 Removes a definitionID : recordID pair from the index of the authenticated DID . Arguments: name: string ( alias or IndexKey ) Returns: Promise<void> .getIndex() \u00b6 Returns the index for the given DID . This method can be used to get the full definitionID:recordID mapping at once Arguments: did?: string = this.id Returns: Promise<Index | null> .iterator() \u00b6 Returns an async iterator of Entry for the given DID . This method can be used to iteratively load all the records in the index Arguments: \u00e5 did?: string = this.id Returns: AsyncIterableIterator<Entry> .getDefinition() \u00b6 Loads a definition . Arguments : id: StreamID | IndexKey ( StreamID or IndexKey ) Returns: Promise<DefinitionWithID> getLegacy3BoxProfileAsBasicProfile() \u00b6 This function is exposed to help projects transition from 3Box to IDX as a temporary solution. It will be removed from IDX in the future. Returns a BasicProfile object converted from a 3Box profile if existing for the given Ethereum address , or null if unavailable. Arguments: address: string : Ethereum address starting with 0x Returns: Promise<BasicProfile | null>","title":"IDX SDK"},{"location":"reference/idx/#idx-sdk-reference","text":"","title":"IDX SDK Reference"},{"location":"reference/idx/#installation","text":"npm install @ceramicstudio/idx","title":"Installation"},{"location":"reference/idx/#idx-class","text":"","title":"IDX class"},{"location":"reference/idx/#constructor","text":"Arguments: options: IDXOptions","title":"constructor"},{"location":"reference/idx/#authenticated","text":"Returns whether a DID is currently authenticated . Returns: boolean","title":".authenticated"},{"location":"reference/idx/#ceramic","text":"Returns: CeramicApi","title":".ceramic"},{"location":"reference/idx/#id","text":"Returns the DID of the currently authenticated user. Accessing this property will throw an error if the instance is not authenticated. Returns: string","title":".id"},{"location":"reference/idx/#has","text":"Returns whether a record exists in the index for a given DID . Arguments: name: string ( alias or IndexKey ) did?: string = this.id Returns: Promise<boolean>","title":".has()"},{"location":"reference/idx/#get","text":"Returns a record in the index for a given DID or Blockchain Account ID . Arguments: name: string ( alias or IndexKey ) did?: string = this.id Returns: Promise<unknown>","title":".get()"},{"location":"reference/idx/#set","text":"Sets or modifies a record in the index of the authenticated DID . Arguments: name: string ( alias or IndexKey ) content: unknown options?: CreateOptions (only applied if the record is being created, if it already exists they are ignored) Returns: Promise<StreamID> the recordID of the created record","title":".set()"},{"location":"reference/idx/#merge","text":"Performs a shallow (one level) merge to a record in the index of the authenticated DID . Arguments: name: string ( alias or IndexKey ) content: unknown options?: CreateOptions (only applied if the record is being created, if it already exists they are ignored) Returns: Promise<StreamID> the recordID of the created record","title":".merge()"},{"location":"reference/idx/#setall","text":"Similar to the .set() method but for setting multiple records at once in a more efficient way. The index will only get updated if all records are successfully set. Arguments: contents: Record<string, unknown> options?: CreateOptions (only applied if the record is being created, if it already exists they are ignored) Returns: Promise<Record<string, string>> the recordIDs of the created records","title":".setAll()"},{"location":"reference/idx/#setdefaults","text":"Similar to the .setAll() method but only sets records for keys that are not already present in the index . contents: Record<string, unknown> options?: CreateOptions (only applied if the record is being created, if it already exists they are ignored) Returns: Promise<Record<string, string>> the recordIDs of the created records","title":".setDefaults()"},{"location":"reference/idx/#remove","text":"Removes a definitionID : recordID pair from the index of the authenticated DID . Arguments: name: string ( alias or IndexKey ) Returns: Promise<void>","title":".remove()"},{"location":"reference/idx/#getindex","text":"Returns the index for the given DID . This method can be used to get the full definitionID:recordID mapping at once Arguments: did?: string = this.id Returns: Promise<Index | null>","title":".getIndex()"},{"location":"reference/idx/#iterator","text":"Returns an async iterator of Entry for the given DID . This method can be used to iteratively load all the records in the index Arguments: \u00e5 did?: string = this.id Returns: AsyncIterableIterator<Entry>","title":".iterator()"},{"location":"reference/idx/#getdefinition","text":"Loads a definition . Arguments : id: StreamID | IndexKey ( StreamID or IndexKey ) Returns: Promise<DefinitionWithID>","title":".getDefinition()"},{"location":"reference/idx/#getlegacy3boxprofileasbasicprofile","text":"This function is exposed to help projects transition from 3Box to IDX as a temporary solution. It will be removed from IDX in the future. Returns a BasicProfile object converted from a 3Box profile if existing for the given Ethereum address , or null if unavailable. Arguments: address: string : Ethereum address starting with 0x Returns: Promise<BasicProfile | null>","title":"getLegacy3BoxProfileAsBasicProfile()"},{"location":"reference/types/","text":"TypeScript types \u00b6 IndexKey \u00b6 An opaque key used to identify records in the index. type IndexKey = string Index \u00b6 Represents the shape of the content stored in the index. type Index = Record < IndexKey , string > Schema \u00b6 A type representing a JSON Schema. type Schema = Record < string , unknown > Definition \u00b6 A definition is a Ceramic stream that describes a record in the index. type Definition < C extends Record < string , any > = Record < string , any >> = { name : string description : string schema : string url? : string config? : C } DefinitionWithID \u00b6 type DefinitionWithID < C extends Record < string , unknown > = Record < string , unknown > , > = Definition < C > & { id : StreamID } Aliases \u00b6 type Aliases = Record < string , string > Entry \u00b6 type Entry = { key : IndexKey id : string record : unknown } DefinitionName \u00b6 Name for aliases of core IDX definitions. type DefinitionName = 'basicProfile' | 'cryptoAccountLinks' | 'threeIdKeychain' PublishedDefinitions \u00b6 Record of definitions published to Ceramic. type PublishedDefinitions = Record < DefinitionName , string > SchemaName \u00b6 Name for aliases of core IDX schemas. type SchemaName = | 'BasicProfile' | 'CryptoAccounts' | 'Definition' | 'IdentityIndex' | 'ThreeIdKeychain' PublishedSchemas \u00b6 Record of schemas published to Ceramic. type PublishedSchemas = Record < SchemaName , string > PublishedConfig \u00b6 Definitions and schemas published to Ceramic. interface PublishedConfig { definitions : PublishedDefinitions schemas : PublishedSchemas } IDXOptions \u00b6 Options used by the IDX class constructor interface IDXOptions { aliases? : DefinitionsAliases autopin? : boolean ceramic : CeramicApi } CreateOptions \u00b6 Options used by the .set method of the IDX class. interface CreateOptions { pin? : boolean }","title":"Types"},{"location":"reference/types/#typescript-types","text":"","title":"TypeScript types"},{"location":"reference/types/#indexkey","text":"An opaque key used to identify records in the index. type IndexKey = string","title":"IndexKey"},{"location":"reference/types/#index","text":"Represents the shape of the content stored in the index. type Index = Record < IndexKey , string >","title":"Index"},{"location":"reference/types/#schema","text":"A type representing a JSON Schema. type Schema = Record < string , unknown >","title":"Schema"},{"location":"reference/types/#definition","text":"A definition is a Ceramic stream that describes a record in the index. type Definition < C extends Record < string , any > = Record < string , any >> = { name : string description : string schema : string url? : string config? : C }","title":"Definition"},{"location":"reference/types/#definitionwithid","text":"type DefinitionWithID < C extends Record < string , unknown > = Record < string , unknown > , > = Definition < C > & { id : StreamID }","title":"DefinitionWithID"},{"location":"reference/types/#aliases","text":"type Aliases = Record < string , string >","title":"Aliases"},{"location":"reference/types/#entry","text":"type Entry = { key : IndexKey id : string record : unknown }","title":"Entry"},{"location":"reference/types/#definitionname","text":"Name for aliases of core IDX definitions. type DefinitionName = 'basicProfile' | 'cryptoAccountLinks' | 'threeIdKeychain'","title":"DefinitionName"},{"location":"reference/types/#publisheddefinitions","text":"Record of definitions published to Ceramic. type PublishedDefinitions = Record < DefinitionName , string >","title":"PublishedDefinitions"},{"location":"reference/types/#schemaname","text":"Name for aliases of core IDX schemas. type SchemaName = | 'BasicProfile' | 'CryptoAccounts' | 'Definition' | 'IdentityIndex' | 'ThreeIdKeychain'","title":"SchemaName"},{"location":"reference/types/#publishedschemas","text":"Record of schemas published to Ceramic. type PublishedSchemas = Record < SchemaName , string >","title":"PublishedSchemas"},{"location":"reference/types/#publishedconfig","text":"Definitions and schemas published to Ceramic. interface PublishedConfig { definitions : PublishedDefinitions schemas : PublishedSchemas }","title":"PublishedConfig"},{"location":"reference/types/#idxoptions","text":"Options used by the IDX class constructor interface IDXOptions { aliases? : DefinitionsAliases autopin? : boolean ceramic : CeramicApi }","title":"IDXOptions"},{"location":"reference/types/#createoptions","text":"Options used by the .set method of the IDX class. interface CreateOptions { pin? : boolean }","title":"CreateOptions"}]}